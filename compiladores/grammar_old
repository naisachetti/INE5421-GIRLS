PROGRAM ::=  STATEMENT | FUNCLIST | &
FUNCLIST ::= FUNCDEF FUNCLIST | FUNCDEF
FUNCDEF ::= def ident \( PARAMLIST \) STATEMENT
PARAMLIST ::=  PARAMLIST_AUX1 | &
PARAMLIST_AUX1 ::= TYPE LVALUE , PARAMLIST_AUX1 | TYPE LVALUE
TYPE ::= int | float | string
STATEMENT ::=  { STATELIST } | VARDECL ;  | ATRIBSTAT ;  | MULTIATRIBSTAT ; | PRINTSTAT ;  | READSTAT ; | FUNCCALL ; | RETURNSTAT ; | IFSTAT | FORSTAT | break ;  |  ;
VARDECL ::=  TYPE ident VARDECL_AUX1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1 | &
VARDECL_AUX2 ::= int_constant | ident
STATELIST ::= STATEMENT | STATEMENT STATELIST
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
ATRIBSTAT_AUX1 ::= EXPRESSION | ALLOCEXPRESSION | FUNCCALL
MULTIATRIBSTAT ::=  \( LEFTMULTIATRIBSTAT \) = \( RIGHTMULTIATRIBSTAT \) | \( LEFTMULTIATRIBSTAT \) = FUNCCALL
LEFTMULTIATRIBSTAT ::= LVALUE , LEFTMULTIATRIBSTAT | LVALUE
RIGHTMULTIATRIBSTAT ::= ATRIBSTAT_AUX1 , RIGHTMULTIATRIBSTAT | ATRIBSTAT_AUX1
FUNCCALL ::= ident \( PARAMLISTCALL \)
PARAMLISTCALL ::=  PARAMLISTCALL_AUX1 | &
PARAMLISTCALL_AUX1 ::= PARAMLISTCALL_AUX2 , PARAMLISTCALL_AUX1 | PARAMLISTCALL_AUX2
PARAMLISTCALL_AUX2 ::= ident | NUMEXPRESSION
RETURNLIST ::= NUMEXPRESSION , RETURNLIST | NUMEXPRESSION | &
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return RETURNLIST
IFSTAT ::= if \( EXPRESSION \) { STATELIST } ELIFSTAT ELSESTAT
ELIFSTAT ::= elif \( EXPRESSION \) { STATELIST } | elif \( EXPRESSION \) { STATELIST } ELIFSTAT | &
ELSESTAT ::= else { STATELIST } | &
FORSTAT ::= for \( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT \) STATEMENT
ALLOCEXPRESSION ::= new TYPE ALLOCEXPRESSION_AUX1
ALLOCEXPRESSION_AUX1 ::= [ NUMEXPRESSION ] | [ NUMEXPRESSION ] ALLOCEXPRESSION_AUX1
EXPRESSION ::= NUMEXPRESSION EXPRESSION_AUX1
EXPRESSION_AUX1 ::= COMPARATOR NUMEXPRESSION | &
COMPARATOR ::= < | > | <= | >= | == | !=
NUMEXPRESSION ::= TERM NUMEXPRESSION_AUX1
NUMEXPRESSION_AUX1 ::= OPARIT1 TERM | OPARIT1 TERM NUMEXPRESSION_AUX1 | &
OPARIT1 ::= \+ | -
OPARIT2 ::= \* | / | %
TERM ::= UNARYEXPR TERM_AUX1
TERM_AUX1 ::= OPARIT2 UNARYEXPR TERM_AUX1 | &
UNARYEXPR ::= OPARIT1 FACTOR | FACTOR
FACTOR ::=  int_constant | float_constant | string_constant | null | LVALUE |  \( NUMEXPRESSION \)
LVALUE ::= ident LVALUE_AUX1
LVALUE_AUX1 ::= [ LVALUE_AUX2 ] LVALUE_AUX1 | &
LVALUE_AUX2 ::=  NUMEXPRESSION | LVALUE | &
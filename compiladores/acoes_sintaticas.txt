A ::= def ident ( A'2
def ::= def
ident ::= floor
( ::= (
A'2 ::= ) STATEMENT A'4
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
return ::= return
RETURNSTAT'1 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= strlen
( ::= (
A'2 ::= ) STATEMENT A'4
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
return ::= return
RETURNSTAT'1 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= slice
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= string
string ::= string
LVALUE ::= ident UNARYEXPR'1
ident ::= word
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= i_min
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= i_max
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= slice_length
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= slice_length
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i_max
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= ident TERM'2
ident ::= i_min
TERM'2 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= string ident STATELIST'4
string ::= string
ident ::= portion
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
[ ::= [
VARDECL_AUX2 ::= ident
ident ::= slice_length
] ::= ]
VARDECL_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i_portion
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= i_portion
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= SIGNAL FACTOR ATRIBSTAT_AUX1'1
SIGNAL ::= -
- ::= -
FACTOR ::= int_constant
int_constant ::= 1
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i_min
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= i
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i_max
NUMEXPRESSION'2 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= i_portion
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i_portion
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= portion
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i_portion
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= word
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
return ::= return
RETURNSTAT'1 ::= ident RETURNLIST'2
ident ::= portion
RETURNLIST'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= mainPatternSearching
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= string
string ::= string
LVALUE ::= ident UNARYEXPR'1
ident ::= sequence
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= seq_length
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= seq_length
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= strlen
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= sequence
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= pattern_length
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= pattern_length
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= floor
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= seq_length
PARAMLISTCALL'2 ::= TERM_AUX1 PARAMLISTCALL'4
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
OPERATION ::= /
/ ::= /
UNARYEXPR ::= float_constant
float_constant ::= 2.0
TERM'1 ::= &
PARAMLISTCALL'4 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i_min
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= i_min
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i_max
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= i_max
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= pattern_length
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= i
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= ==
== ::= ==
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= pattern_length
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <=
<= ::= <=
NUMEXPRESSION ::= int_constant NUMEXPRESSION'1
int_constant ::= 1
NUMEXPRESSION'1 ::= &
) ::= )
{ ::= {
STATELIST ::= break ; STATELIST'1
break ::= break
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= i_max
EXPRESSION'1 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= ident TERM'2
ident ::= pattern_length
TERM'2 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= seq_length
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
) ::= )
{ ::= {
STATELIST ::= string ident STATELIST'4
string ::= string
ident ::= pattern
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
[ ::= [
VARDECL_AUX2 ::= ident
ident ::= pattern_length
] ::= ]
VARDECL_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= pattern
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= slice
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= sequence
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= i_min
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= i_max
PARAMLISTCALL'2 ::= NUMEXPRESSION_AUX1 PARAMLISTCALL'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
PARAMLISTCALL'3 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= naivePatternSearching
STATELIST'5 ::= ( FUNCCALL'1 ; STATELIST'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= sequence
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= pattern
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= i_max
PARAMLISTCALL'2 ::= NUMEXPRESSION_AUX1 PARAMLISTCALL'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
PARAMLISTCALL'3 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= i_min
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i_min
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= i_max
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i_max
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= ELSESTAT STATELIST'1
ELSESTAT ::= else { STATELIST }
else ::= else
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= pattern_length
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= pattern_length
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= i_min
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= i_max
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= pattern_length
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'1 ::= &
} ::= }
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= naivePatternSearching
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= string
string ::= string
LVALUE ::= ident UNARYEXPR'1
ident ::= sequence
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= string
string ::= string
LVALUE ::= ident UNARYEXPR'1
ident ::= pattern
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= i_start
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= seq_length
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= seq_length
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= strlen
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= sequence
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= pattern_length
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= pattern_length
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= strlen
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= pattern
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i_min
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= i_min
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i_start
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= found
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= found
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= i
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= ==
== ::= ==
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= i_min
EXPRESSION'1 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= ident TERM'2
ident ::= pattern_length
TERM'2 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= COMPARE NUMEXPRESSION
COMPARE ::= >=
>= ::= >=
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= seq_length
NUMEXPRESSION'2 ::= &
) ::= )
{ ::= {
STATELIST ::= break ; STATELIST'1
break ::= break
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= sequence
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i_min
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= ==
== ::= ==
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= pattern
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= int_constant NUMEXPRESSION'1
int_constant ::= 0
NUMEXPRESSION'1 ::= &
] ::= ]
UNARYEXPR'1 ::= &
NUMEXPRESSION'1 ::= &
) ::= )
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= j
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= j
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 1
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= j
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= pattern_length
NUMEXPRESSION'2 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= sequence
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i_min
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= ident TERM'2
ident ::= j
TERM'2 ::= &
NUMEXPRESSION_AUX1'1 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= !=
!= ::= !=
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= pattern
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= j
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
NUMEXPRESSION'1 ::= &
) ::= )
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= i_min
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i_min
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= break ; STATELIST'1
break ::= break
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= j
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= ==
== ::= ==
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= pattern_length
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
) ::= )
{ ::= {
STATELIST ::= string ident STATELIST'4
string ::= string
ident ::= out
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= out
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= pattern
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
STATELIST'1 ::= PRINTSTAT ; STATELIST'1
PRINTSTAT ::= print EXPRESSION
print ::= print
EXPRESSION ::= ( NUMEXPRESSION ) ATRIBSTAT_AUX1'1
( ::= (
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= out
NUMEXPRESSION'2 ::= &
) ::= )
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= found
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 1
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= break ; STATELIST'1
break ::= break
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
} ::= }
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= found
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= !=
!= ::= !=
NUMEXPRESSION ::= int_constant NUMEXPRESSION'1
int_constant ::= 0
NUMEXPRESSION'1 ::= &
) ::= )
{ ::= {
STATELIST ::= break ; STATELIST'1
break ::= break
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
} ::= }
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= rabinKarpPatternSearch
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= string
string ::= string
LVALUE ::= ident UNARYEXPR'1
ident ::= pattern
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= string
string ::= string
LVALUE ::= ident UNARYEXPR'1
ident ::= sequence
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= prime_number
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= m
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= n
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= d
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= j
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= q
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= p
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= t
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= h
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= m
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= strlen
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= pattern
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= n
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= strlen
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= sequence
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= p
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= t
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= h
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= i
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= m
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
) ::= )
STATEMENT ::= ident A'5
ident ::= h
A'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ;
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ( NUMEXPRESSION ) ATRIBSTAT_AUX1'1
( ::= (
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= h
NUMEXPRESSION'2 ::= TERM_AUX1 NUMEXPRESSION_AUX1'1
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
OPERATION ::= *
* ::= *
UNARYEXPR ::= ident UNARYEXPR'1
ident ::= d
UNARYEXPR'1 ::= &
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
) ::= )
ATRIBSTAT_AUX1'1 ::= TERM_AUX1 ATRIBSTAT_AUX1'4
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
OPERATION ::= %
% ::= %
UNARYEXPR ::= ident UNARYEXPR'1
ident ::= q
UNARYEXPR'1 ::= &
TERM'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
; ::= ;
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= i
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= m
NUMEXPRESSION'2 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= p
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ( NUMEXPRESSION ) ATRIBSTAT_AUX1'1
( ::= (
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= d
NUMEXPRESSION'2 ::= TERM_AUX1 NUMEXPRESSION_AUX1'1
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
OPERATION ::= *
* ::= *
UNARYEXPR ::= ident UNARYEXPR'1
ident ::= p
UNARYEXPR'1 ::= &
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
) ::= )
ATRIBSTAT_AUX1'1 ::= TERM_AUX1 ATRIBSTAT_AUX1'4
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
OPERATION ::= %
% ::= %
UNARYEXPR ::= ident UNARYEXPR'1
ident ::= q
UNARYEXPR'1 ::= &
TERM'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= t
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ( NUMEXPRESSION ) ATRIBSTAT_AUX1'1
( ::= (
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= d
NUMEXPRESSION'2 ::= TERM_AUX1 NUMEXPRESSION_AUX1'1
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
OPERATION ::= *
* ::= *
UNARYEXPR ::= ident UNARYEXPR'1
ident ::= t
UNARYEXPR'1 ::= &
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
) ::= )
ATRIBSTAT_AUX1'1 ::= TERM_AUX1 ATRIBSTAT_AUX1'4
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
OPERATION ::= %
% ::= %
UNARYEXPR ::= ident UNARYEXPR'1
ident ::= q
UNARYEXPR'1 ::= &
TERM'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= i
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <=
<= ::= <=
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= n
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= ident TERM'2
ident ::= m
TERM'2 ::= &
NUMEXPRESSION_AUX1'1 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= p
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= ==
== ::= ==
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= t
NUMEXPRESSION'2 ::= &
) ::= )
{ ::= {
STATELIST ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= j
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= j
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= m
NUMEXPRESSION'2 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= j
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= j
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= sequence
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= ident TERM'2
ident ::= j
TERM'2 ::= &
NUMEXPRESSION_AUX1'1 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= !=
!= ::= !=
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= pattern
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= j
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
NUMEXPRESSION'1 ::= &
) ::= )
{ ::= {
STATELIST ::= break ; STATELIST'1
break ::= break
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
} ::= }
STATELIST'1 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= j
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= ==
== ::= ==
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= m
NUMEXPRESSION'2 ::= &
) ::= )
{ ::= {
STATELIST ::= string ident STATELIST'4
string ::= string
ident ::= out
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= PRINTSTAT ; STATELIST'1
PRINTSTAT ::= print EXPRESSION
print ::= print
EXPRESSION ::= ( NUMEXPRESSION ) ATRIBSTAT_AUX1'1
( ::= (
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= out
NUMEXPRESSION'2 ::= &
) ::= )
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
} ::= }
STATELIST'2 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= i
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= n
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= ident TERM'2
ident ::= m
TERM'2 ::= &
NUMEXPRESSION_AUX1'1 ::= &
) ::= )
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= t
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ( NUMEXPRESSION ) ATRIBSTAT_AUX1'1
( ::= (
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= sequence
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
NUMEXPRESSION'1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= ident TERM'2
ident ::= sequence
TERM'2 ::= LVALUE_AUX1 TERM'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= ident TERM'2
ident ::= m
TERM'2 ::= &
NUMEXPRESSION_AUX1'1 ::= &
] ::= ]
UNARYEXPR'1 ::= &
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
) ::= )
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= t
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= int_constant NUMEXPRESSION'1
int_constant ::= 0
NUMEXPRESSION'1 ::= &
) ::= )
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= t
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ( NUMEXPRESSION ) ATRIBSTAT_AUX1'1
( ::= (
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= t
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= ident TERM'2
ident ::= q
TERM'2 ::= &
NUMEXPRESSION_AUX1'1 ::= &
) ::= )
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
} ::= }
STATELIST'2 ::= &
} ::= }
STATELIST'1 ::= &
} ::= }
A'4 ::= &

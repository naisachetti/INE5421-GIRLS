A ::= def ident ( A'2
def ::= def
ident ::= quickSort
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
] ::= ]
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array_size
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= low
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= high
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= partition_i
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= new_array
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
[ ::= [
VARDECL_AUX2 ::= ident
ident ::= array_size
] ::= ]
VARDECL_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= MULTIATRIBSTAT ; STATELIST'1
MULTIATRIBSTAT ::= ( LEFTMULTIATRIBSTAT ) = MULTIATRIBSTAT'1
( ::= (
LEFTMULTIATRIBSTAT ::= ident LEFTMULTIATRIBSTAT'1
ident ::= partition_i
LEFTMULTIATRIBSTAT'1 ::= , LEFTMULTIATRIBSTAT
, ::= ,
LEFTMULTIATRIBSTAT ::= ident LEFTMULTIATRIBSTAT'1
ident ::= new_array
LEFTMULTIATRIBSTAT'1 ::= &
) ::= )
= ::= =
MULTIATRIBSTAT'1 ::= ident ( FUNCCALL'1
ident ::= partitionQuickSort
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array_size
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= low
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= high
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= quickSort
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= new_array
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array_size
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= low
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= partition_i
PARAMLISTCALL'2 ::= NUMEXPRESSION_AUX1 PARAMLISTCALL'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
PARAMLISTCALL'3 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= quickSort
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= new_array
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array_size
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= partition_i
PARAMLISTCALL'2 ::= NUMEXPRESSION_AUX1 PARAMLISTCALL'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
PARAMLISTCALL'3 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= high
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
return ::= return
RETURNSTAT'1 ::= ident RETURNLIST'2
ident ::= new_array
RETURNLIST'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= partitionQuickSort
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
] ::= ]
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array_size
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= low
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= high
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= new_array
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
[ ::= [
VARDECL_AUX2 ::= ident
ident ::= array_size
] ::= ]
VARDECL_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= array
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= pivot
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= pivot
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= high
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= i
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= low
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= j
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= j
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= j
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <=
<= ::= <=
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= high
NUMEXPRESSION'2 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= j
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= j
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= new_array
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= j
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= new_array
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= high
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
NUMEXPRESSION'1 ::= &
) ::= )
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= i
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= aux
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= aux
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= new_array
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= j
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= j
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= new_array
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= aux
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
} ::= }
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= aux
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= aux
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= new_array
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= high
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= high
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= new_array
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
] ::= ]
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= aux
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
return ::= return
RETURNSTAT'1 ::= ident RETURNLIST'2
ident ::= i
RETURNLIST'2 ::= NUMEXPRESSION_AUX1 RETURNLIST'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
RETURNLIST'3 ::= , RETURNSTAT'1
, ::= ,
RETURNSTAT'1 ::= ident RETURNLIST'2
ident ::= new_array
RETURNLIST'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= sort
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
] ::= ]
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array_size
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= new_array
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
[ ::= [
VARDECL_AUX2 ::= ident
ident ::= array_size
] ::= ]
VARDECL_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= buildHeap
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array_size
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= array_size
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= i
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >
> ::= >
NUMEXPRESSION ::= int_constant NUMEXPRESSION'1
int_constant ::= 0
NUMEXPRESSION'1 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= swap
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= new_array
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= i
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= i
PARAMLISTCALL'2 ::= NUMEXPRESSION_AUX1 PARAMLISTCALL'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
PARAMLISTCALL'3 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= heap_size
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= heap_size
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= heapify
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= new_array
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= int_constant PARAMLISTCALL'1
int_constant ::= 0
PARAMLISTCALL'1 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= heap_size
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'1 ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= reverse
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= new_array
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array_size
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
return ::= return
RETURNSTAT'1 ::= ident RETURNLIST'2
ident ::= new_array
RETURNLIST'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= buildHeap
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
] ::= ]
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array_size
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= new_array
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
[ ::= [
VARDECL_AUX2 ::= ident
ident ::= array_size
] ::= ]
VARDECL_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= array_size
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= i
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >=
>= ::= >=
NUMEXPRESSION ::= int_constant NUMEXPRESSION'1
int_constant ::= 0
NUMEXPRESSION'1 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= heapify
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array_size
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= i
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array_size
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
return ::= return
RETURNSTAT'1 ::= ident RETURNLIST'2
ident ::= new_array
RETURNLIST'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= heapify
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
] ::= ]
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array_size
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= heap_size
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= largest
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= left
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= right
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= largest
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= left
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 2
ATRIBSTAT_AUX1'1 ::= TERM_AUX1 ATRIBSTAT_AUX1'4
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
OPERATION ::= *
* ::= *
UNARYEXPR ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
TERM'1 ::= &
ATRIBSTAT_AUX1'4 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= right
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 2
ATRIBSTAT_AUX1'1 ::= TERM_AUX1 ATRIBSTAT_AUX1'4
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
OPERATION ::= *
* ::= *
UNARYEXPR ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
TERM'1 ::= &
ATRIBSTAT_AUX1'4 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 2
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
; ::= ;
STATELIST'1 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= left
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= heap_size
NUMEXPRESSION'2 ::= &
) ::= )
{ ::= {
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= array
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= left
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >
> ::= >
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= arr
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= largest
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
NUMEXPRESSION'1 ::= &
) ::= )
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= largest
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= left
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
} ::= }
STATELIST'2 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= right
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= heap_size
NUMEXPRESSION'2 ::= &
) ::= )
{ ::= {
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= array
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= right
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >
> ::= >
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= array
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= largest
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
NUMEXPRESSION'1 ::= &
) ::= )
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= largest
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= right
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
} ::= }
STATELIST'2 ::= int ident STATELIST'4
int ::= int
ident ::= heap
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
[ ::= [
VARDECL_AUX2 ::= ident
ident ::= array_size
] ::= ]
VARDECL_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident EXPRESSION'1
ident ::= largest
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= !=
!= ::= !=
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= &
) ::= )
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= heap
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= swap
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= i
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= largest
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= heap
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= heapify
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= heap
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= largest
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= heap_size
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
return ::= return
RETURNSTAT'1 ::= ident RETURNLIST'2
ident ::= heap
RETURNLIST'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= heapSort
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
] ::= ]
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array_size
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= sorted_array
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
[ ::= [
VARDECL_AUX2 ::= ident
ident ::= array_size
] ::= ]
VARDECL_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= sorted_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= sort
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
( ::= (
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array
PARAMLISTCALL'2 ::= , PARAMLISTCALL
, ::= ,
PARAMLISTCALL ::= ident PARAMLISTCALL'2
ident ::= array_size
PARAMLISTCALL'2 ::= &
) ::= )
; ::= ;
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
return ::= return
RETURNSTAT'1 ::= ident RETURNLIST'2
ident ::= sorted_array
RETURNLIST'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= swap
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
] ::= ]
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= largest
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= aux
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= aux
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= array
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= array
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= largest
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= largest
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= aux
ATRIBSTAT_AUX1'2 ::= &
; ::= ;
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
return ::= return
RETURNSTAT'1 ::= ident RETURNLIST'2
ident ::= array
RETURNLIST'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
A'4 ::= def ident ( A'2
def ::= def
ident ::= reverse
( ::= (
A'2 ::= PARAMLIST ) STATEMENT A'4
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
] ::= ]
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
, ::= ,
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
int ::= int
LVALUE ::= ident UNARYEXPR'1
ident ::= array_size
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident STATELIST'4
int ::= int
ident ::= new_array
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
[ ::= [
VARDECL_AUX2 ::= ident
ident ::= array_size
] ::= ]
VARDECL_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= int ident STATELIST'4
int ::= int
ident ::= i
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
EXPRESSION ::= ident EXPRESSION'1
ident ::= i
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= array_size
NUMEXPRESSION'2 ::= &
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= i
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
+ ::= +
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'3 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= new_array
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= i
NUMEXPRESSION'2 ::= &
] ::= ]
UNARYEXPR'1 ::= &
= ::= =
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ident ::= array
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
[ ::= [
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
ident ::= array_size
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= ident TERM'2
ident ::= i
TERM'2 ::= &
NUMEXPRESSION_AUX1'1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
- ::= -
TERM ::= int_constant TERM'1
int_constant ::= 1
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
] ::= ]
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
return ::= return
RETURNSTAT'1 ::= ident RETURNLIST'2
ident ::= new_array
RETURNLIST'2 ::= &
; ::= ;
STATELIST'1 ::= &
} ::= }
A'4 ::= &

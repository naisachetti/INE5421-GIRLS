A ::= def ident ( A'1
ident ::= quickSort
( ::= (
int ::= int
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array
LVALUE ::= ident UNARYEXPR'1
[ ::= [
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
] ::= ]
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array_size
LVALUE ::= ident UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= low
LVALUE ::= ident UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= high
LVALUE ::= ident UNARYEXPR'1
) ::= )
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
int ::= int
STATELIST ::= int ident STATELIST'5
ident ::= partition_i
; ::= ;
STATELIST'5 ::= ; STATELIST'1
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= new_array
[ ::= [
STATELIST'5 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
ident ::= array_size
VARDECL_AUX2 ::= ident
] ::= ]
; ::= ;
VARDECL_AUX1'1 ::= &
( ::= (
STATELIST'1 ::= MULTIATRIBSTAT ; STATELIST'1
MULTIATRIBSTAT ::= ( LEFTMULTIATRIBSTAT ) = MULTIATRIBSTAT'1
ident ::= partition_i
LEFTMULTIATRIBSTAT ::= ident LEFTMULTIATRIBSTAT'1
, ::= ,
LEFTMULTIATRIBSTAT'1 ::= , LEFTMULTIATRIBSTAT
ident ::= new_array
LEFTMULTIATRIBSTAT ::= ident LEFTMULTIATRIBSTAT'1
) ::= )
LEFTMULTIATRIBSTAT'1 ::= &
= ::= =
ident ::= partitionQuickSort
MULTIATRIBSTAT'1 ::= ident ( FUNCCALL'1
( ::= (
ident ::= array
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= array_size
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= low
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= high
PARAMLISTCALL ::= ident PARAMLISTCALL'2
) ::= )
PARAMLISTCALL'2 ::= &
; ::= ;
ident ::= new_array
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= quickSort
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
( ::= (
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
ident ::= new_array
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= array_size
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= low
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= partition_i
PARAMLISTCALL ::= ident PARAMLISTCALL'2
- ::= -
PARAMLISTCALL'2 ::= NUMEXPRESSION_AUX1 PARAMLISTCALL'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
int_constant ::= 1
TERM ::= int_constant TERM'1
) ::= )
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
PARAMLISTCALL'4 ::= &
; ::= ;
ident ::= new_array
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= quickSort
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
( ::= (
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
ident ::= new_array
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= array_size
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= partition_i
PARAMLISTCALL ::= ident PARAMLISTCALL'2
+ ::= +
PARAMLISTCALL'2 ::= NUMEXPRESSION_AUX1 PARAMLISTCALL'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
int_constant ::= 1
TERM ::= int_constant TERM'1
, ::= ,
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
PARAMLISTCALL'4 ::= , PARAMLISTCALL
ident ::= high
PARAMLISTCALL ::= ident PARAMLISTCALL'2
) ::= )
PARAMLISTCALL'2 ::= &
; ::= ;
return ::= return
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
ident ::= new_array
RETURNSTAT'1 ::= ident RETURNLIST'2
; ::= ;
RETURNLIST'2 ::= &
} ::= }
STATELIST'1 ::= &
def ::= def
A'3 ::= def ident ( A'1
ident ::= partitionQuickSort
( ::= (
int ::= int
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array
LVALUE ::= ident UNARYEXPR'1
[ ::= [
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
] ::= ]
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array_size
LVALUE ::= ident UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= low
LVALUE ::= ident UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= high
LVALUE ::= ident UNARYEXPR'1
) ::= )
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
int ::= int
STATELIST ::= int ident STATELIST'5
ident ::= new_array
[ ::= [
STATELIST'5 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
ident ::= array_size
VARDECL_AUX2 ::= ident
] ::= ]
; ::= ;
VARDECL_AUX1'1 ::= &
ident ::= new_array
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= array
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
; ::= ;
ATRIBSTAT_AUX1'2 ::= &
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= pivot
; ::= ;
STATELIST'5 ::= ; STATELIST'1
ident ::= pivot
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= high
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
; ::= ;
ATRIBSTAT_AUX1'2 ::= &
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= i
; ::= ;
STATELIST'5 ::= ; STATELIST'1
ident ::= i
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= low
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
- ::= -
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
int_constant ::= 1
TERM ::= int_constant TERM'1
; ::= ;
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= j
; ::= ;
STATELIST'5 ::= ; STATELIST'1
for ::= for
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
( ::= (
ident ::= j
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
= ::= =
UNARYEXPR'1 ::= &
int_constant ::= 0
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
; ::= ;
ATRIBSTAT_AUX1'1 ::= &
ident ::= j
EXPRESSION ::= ident EXPRESSION'1
<= ::= <=
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <=
ident ::= high
NUMEXPRESSION ::= ident NUMEXPRESSION'2
; ::= ;
NUMEXPRESSION'2 ::= &
ident ::= j
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
= ::= =
UNARYEXPR'1 ::= &
ident ::= j
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
+ ::= +
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
int_constant ::= 1
TERM ::= int_constant TERM'1
) ::= )
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
if ::= if
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
( ::= (
ident ::= new_array
EXPRESSION ::= ident EXPRESSION'1
[ ::= [
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= j
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
< ::= <
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
ident ::= new_array
NUMEXPRESSION ::= ident NUMEXPRESSION'2
[ ::= [
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= high
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
) ::= )
UNARYEXPR'1 ::= &
NUMEXPRESSION'1 ::= &
{ ::= {
ident ::= i
STATELIST ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= i
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
+ ::= +
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
int_constant ::= 1
TERM ::= int_constant TERM'1
; ::= ;
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= aux
; ::= ;
STATELIST'5 ::= ; STATELIST'1
ident ::= aux
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= new_array
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
[ ::= [
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= j
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
; ::= ;
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
ident ::= new_array
STATELIST'1 ::= ident STATELIST'4
[ ::= [
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
ident ::= j
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
= ::= =
UNARYEXPR'1 ::= &
ident ::= new_array
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
[ ::= [
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= i
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
; ::= ;
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
ident ::= new_array
STATELIST'1 ::= ident STATELIST'4
[ ::= [
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
ident ::= i
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
= ::= =
UNARYEXPR'1 ::= &
ident ::= aux
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
; ::= ;
ATRIBSTAT_AUX1'2 ::= &
} ::= }
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= aux
; ::= ;
STATELIST'5 ::= ; STATELIST'1
ident ::= aux
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= new_array
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
[ ::= [
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= high
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
; ::= ;
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
ident ::= new_array
STATELIST'1 ::= ident STATELIST'4
[ ::= [
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
ident ::= high
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
= ::= =
UNARYEXPR'1 ::= &
ident ::= new_array
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
[ ::= [
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= i
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
+ ::= +
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
int_constant ::= 1
TERM ::= int_constant TERM'1
] ::= ]
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
; ::= ;
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
ident ::= new_array
STATELIST'1 ::= ident STATELIST'4
[ ::= [
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
ident ::= i
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
+ ::= +
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
int_constant ::= 1
TERM ::= int_constant TERM'1
] ::= ]
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
= ::= =
UNARYEXPR'1 ::= &
ident ::= aux
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
; ::= ;
ATRIBSTAT_AUX1'2 ::= &
return ::= return
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
ident ::= i
RETURNSTAT'1 ::= ident RETURNLIST'2
+ ::= +
RETURNLIST'2 ::= NUMEXPRESSION_AUX1 RETURNLIST'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
int_constant ::= 1
TERM ::= int_constant TERM'1
, ::= ,
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
RETURNLIST'4 ::= , RETURNSTAT'1
ident ::= new_array
RETURNSTAT'1 ::= ident RETURNLIST'2
; ::= ;
RETURNLIST'2 ::= &
} ::= }
STATELIST'1 ::= &
def ::= def
A'3 ::= def ident ( A'1
ident ::= sort
( ::= (
int ::= int
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array
LVALUE ::= ident UNARYEXPR'1
[ ::= [
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
] ::= ]
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array_size
LVALUE ::= ident UNARYEXPR'1
) ::= )
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
int ::= int
STATELIST ::= int ident STATELIST'5
ident ::= new_array
[ ::= [
STATELIST'5 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
ident ::= array_size
VARDECL_AUX2 ::= ident
] ::= ]
; ::= ;
VARDECL_AUX1'1 ::= &
ident ::= new_array
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= buildHeap
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
( ::= (
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
ident ::= array
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= array_size
PARAMLISTCALL ::= ident PARAMLISTCALL'2
) ::= )
PARAMLISTCALL'2 ::= &
; ::= ;
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= i
; ::= ;
STATELIST'5 ::= ; STATELIST'1
for ::= for
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
( ::= (
ident ::= i
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
= ::= =
UNARYEXPR'1 ::= &
ident ::= array_size
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
- ::= -
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
int_constant ::= 1
TERM ::= int_constant TERM'1
; ::= ;
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
ident ::= i
EXPRESSION ::= ident EXPRESSION'1
> ::= >
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >
int_constant ::= 0
NUMEXPRESSION ::= int_constant NUMEXPRESSION'1
; ::= ;
NUMEXPRESSION'1 ::= &
ident ::= i
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
= ::= =
UNARYEXPR'1 ::= &
ident ::= i
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
- ::= -
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
int_constant ::= 1
TERM ::= int_constant TERM'1
) ::= )
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
ident ::= new_array
STATELIST ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= swap
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
( ::= (
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
ident ::= new_array
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= i
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= i
PARAMLISTCALL ::= ident PARAMLISTCALL'2
- ::= -
PARAMLISTCALL'2 ::= NUMEXPRESSION_AUX1 PARAMLISTCALL'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
int_constant ::= 1
TERM ::= int_constant TERM'1
) ::= )
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
PARAMLISTCALL'4 ::= &
; ::= ;
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= heap_size
; ::= ;
STATELIST'5 ::= ; STATELIST'1
ident ::= heap_size
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= i
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
; ::= ;
ATRIBSTAT_AUX1'2 ::= &
ident ::= new_array
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= heapify
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
( ::= (
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
ident ::= new_array
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
int_constant ::= 0
PARAMLISTCALL ::= int_constant PARAMLISTCALL'1
, ::= ,
PARAMLISTCALL'1 ::= , PARAMLISTCALL
ident ::= heap_size
PARAMLISTCALL ::= ident PARAMLISTCALL'2
) ::= )
PARAMLISTCALL'2 ::= &
; ::= ;
} ::= }
STATELIST'1 ::= &
ident ::= new_array
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= reverse
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
( ::= (
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
ident ::= new_array
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= array_size
PARAMLISTCALL ::= ident PARAMLISTCALL'2
) ::= )
PARAMLISTCALL'2 ::= &
; ::= ;
return ::= return
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
ident ::= new_array
RETURNSTAT'1 ::= ident RETURNLIST'2
; ::= ;
RETURNLIST'2 ::= &
} ::= }
STATELIST'1 ::= &
def ::= def
A'3 ::= def ident ( A'1
ident ::= buildHeap
( ::= (
int ::= int
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array
LVALUE ::= ident UNARYEXPR'1
[ ::= [
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
] ::= ]
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array_size
LVALUE ::= ident UNARYEXPR'1
) ::= )
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
int ::= int
STATELIST ::= int ident STATELIST'5
ident ::= new_array
[ ::= [
STATELIST'5 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
ident ::= array_size
VARDECL_AUX2 ::= ident
] ::= ]
; ::= ;
VARDECL_AUX1'1 ::= &
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= i
; ::= ;
STATELIST'5 ::= ; STATELIST'1
for ::= for
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
( ::= (
ident ::= i
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
= ::= =
UNARYEXPR'1 ::= &
ident ::= array_size
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
; ::= ;
ATRIBSTAT_AUX1'2 ::= &
ident ::= i
EXPRESSION ::= ident EXPRESSION'1
>= ::= >=
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >=
int_constant ::= 0
NUMEXPRESSION ::= int_constant NUMEXPRESSION'1
; ::= ;
NUMEXPRESSION'1 ::= &
ident ::= i
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
= ::= =
UNARYEXPR'1 ::= &
ident ::= i
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
- ::= -
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
int_constant ::= 1
TERM ::= int_constant TERM'1
) ::= )
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
ident ::= new_array
STATELIST ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= heapify
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
( ::= (
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
ident ::= array
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= array_size
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= i
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= array_size
PARAMLISTCALL ::= ident PARAMLISTCALL'2
) ::= )
PARAMLISTCALL'2 ::= &
; ::= ;
} ::= }
STATELIST'1 ::= &
return ::= return
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
ident ::= new_array
RETURNSTAT'1 ::= ident RETURNLIST'2
; ::= ;
RETURNLIST'2 ::= &
} ::= }
STATELIST'1 ::= &
def ::= def
A'3 ::= def ident ( A'1
ident ::= heapify
( ::= (
int ::= int
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array
LVALUE ::= ident UNARYEXPR'1
[ ::= [
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
] ::= ]
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array_size
LVALUE ::= ident UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= i
LVALUE ::= ident UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= heap_size
LVALUE ::= ident UNARYEXPR'1
) ::= )
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
int ::= int
STATELIST ::= int ident STATELIST'5
ident ::= largest
; ::= ;
STATELIST'5 ::= ; STATELIST'1
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= left
; ::= ;
STATELIST'5 ::= ; STATELIST'1
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= right
; ::= ;
STATELIST'5 ::= ; STATELIST'1
ident ::= largest
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= i
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
; ::= ;
ATRIBSTAT_AUX1'2 ::= &
ident ::= left
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
int_constant ::= 2
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
* ::= *
ATRIBSTAT_AUX1'1 ::= TERM_AUX1 ATRIBSTAT_AUX1'3
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
OPERATION ::= *
ident ::= i
UNARYEXPR ::= ident UNARYEXPR'1
+ ::= +
UNARYEXPR'1 ::= &
TERM'1 ::= &
ATRIBSTAT_AUX1'3 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
int_constant ::= 1
TERM ::= int_constant TERM'1
; ::= ;
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
ident ::= right
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
int_constant ::= 2
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
* ::= *
ATRIBSTAT_AUX1'1 ::= TERM_AUX1 ATRIBSTAT_AUX1'3
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
OPERATION ::= *
ident ::= i
UNARYEXPR ::= ident UNARYEXPR'1
+ ::= +
UNARYEXPR'1 ::= &
TERM'1 ::= &
ATRIBSTAT_AUX1'3 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
int_constant ::= 2
TERM ::= int_constant TERM'1
; ::= ;
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
if ::= if
STATELIST'1 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
( ::= (
ident ::= left
EXPRESSION ::= ident EXPRESSION'1
< ::= <
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
ident ::= heap_size
NUMEXPRESSION ::= ident NUMEXPRESSION'2
) ::= )
NUMEXPRESSION'2 ::= &
{ ::= {
if ::= if
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
( ::= (
ident ::= array
EXPRESSION ::= ident EXPRESSION'1
[ ::= [
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= left
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
> ::= >
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >
ident ::= arr
NUMEXPRESSION ::= ident NUMEXPRESSION'2
[ ::= [
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= largest
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
) ::= )
UNARYEXPR'1 ::= &
NUMEXPRESSION'1 ::= &
{ ::= {
ident ::= largest
STATELIST ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= left
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
; ::= ;
ATRIBSTAT_AUX1'2 ::= &
} ::= }
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
if ::= if
STATELIST'2 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
( ::= (
ident ::= right
EXPRESSION ::= ident EXPRESSION'1
< ::= <
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
ident ::= heap_size
NUMEXPRESSION ::= ident NUMEXPRESSION'2
) ::= )
NUMEXPRESSION'2 ::= &
{ ::= {
if ::= if
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
( ::= (
ident ::= array
EXPRESSION ::= ident EXPRESSION'1
[ ::= [
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= right
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
> ::= >
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >
ident ::= array
NUMEXPRESSION ::= ident NUMEXPRESSION'2
[ ::= [
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= largest
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
) ::= )
UNARYEXPR'1 ::= &
NUMEXPRESSION'1 ::= &
{ ::= {
ident ::= largest
STATELIST ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= right
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
; ::= ;
ATRIBSTAT_AUX1'2 ::= &
} ::= }
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
int ::= int
STATELIST'2 ::= int ident STATELIST'5
ident ::= heap
[ ::= [
STATELIST'5 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
ident ::= array_size
VARDECL_AUX2 ::= ident
] ::= ]
; ::= ;
VARDECL_AUX1'1 ::= &
if ::= if
STATELIST'1 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
( ::= (
ident ::= largest
EXPRESSION ::= ident EXPRESSION'1
!= ::= !=
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= !=
ident ::= i
NUMEXPRESSION ::= ident NUMEXPRESSION'2
) ::= )
NUMEXPRESSION'2 ::= &
{ ::= {
ident ::= heap
STATELIST ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= swap
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
( ::= (
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
ident ::= array
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= i
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= largest
PARAMLISTCALL ::= ident PARAMLISTCALL'2
) ::= )
PARAMLISTCALL'2 ::= &
; ::= ;
ident ::= heap
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= heapify
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
( ::= (
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
ident ::= heap
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= largest
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= heap_size
PARAMLISTCALL ::= ident PARAMLISTCALL'2
) ::= )
PARAMLISTCALL'2 ::= &
; ::= ;
} ::= }
STATELIST'1 ::= &
return ::= return
STATELIST'2 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
ident ::= heap
RETURNSTAT'1 ::= ident RETURNLIST'2
; ::= ;
RETURNLIST'2 ::= &
} ::= }
STATELIST'1 ::= &
def ::= def
A'3 ::= def ident ( A'1
ident ::= heapSort
( ::= (
int ::= int
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array
LVALUE ::= ident UNARYEXPR'1
[ ::= [
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
] ::= ]
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array_size
LVALUE ::= ident UNARYEXPR'1
) ::= )
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
int ::= int
STATELIST ::= int ident STATELIST'5
ident ::= sorted_array
[ ::= [
STATELIST'5 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
ident ::= array_size
VARDECL_AUX2 ::= ident
] ::= ]
; ::= ;
VARDECL_AUX1'1 ::= &
ident ::= sorted_array
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= sort
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
( ::= (
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
ident ::= array
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
, ::= ,
PARAMLISTCALL'2 ::= , PARAMLISTCALL
ident ::= array_size
PARAMLISTCALL ::= ident PARAMLISTCALL'2
) ::= )
PARAMLISTCALL'2 ::= &
; ::= ;
return ::= return
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
ident ::= sorted_array
RETURNSTAT'1 ::= ident RETURNLIST'2
; ::= ;
RETURNLIST'2 ::= &
} ::= }
STATELIST'1 ::= &
def ::= def
A'3 ::= def ident ( A'1
ident ::= swap
( ::= (
int ::= int
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array
LVALUE ::= ident UNARYEXPR'1
[ ::= [
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
] ::= ]
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= i
LVALUE ::= ident UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= largest
LVALUE ::= ident UNARYEXPR'1
) ::= )
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
int ::= int
STATELIST ::= int ident STATELIST'5
ident ::= aux
; ::= ;
STATELIST'5 ::= ; STATELIST'1
ident ::= aux
STATELIST'1 ::= ident STATELIST'4
= ::= =
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= &
ident ::= array
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
[ ::= [
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= i
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
; ::= ;
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
ident ::= array
STATELIST'1 ::= ident STATELIST'4
[ ::= [
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
ident ::= i
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
= ::= =
UNARYEXPR'1 ::= &
ident ::= array
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
[ ::= [
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= largest
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
; ::= ;
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
ident ::= array
STATELIST'1 ::= ident STATELIST'4
[ ::= [
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
ident ::= largest
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
= ::= =
UNARYEXPR'1 ::= &
ident ::= aux
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
; ::= ;
ATRIBSTAT_AUX1'2 ::= &
return ::= return
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
ident ::= array
RETURNSTAT'1 ::= ident RETURNLIST'2
; ::= ;
RETURNLIST'2 ::= &
} ::= }
STATELIST'1 ::= &
def ::= def
A'3 ::= def ident ( A'1
ident ::= reverse
( ::= (
int ::= int
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array
LVALUE ::= ident UNARYEXPR'1
[ ::= [
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
] ::= ]
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
, ::= ,
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= , PARAMLIST
int ::= int
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
ident ::= array_size
LVALUE ::= ident UNARYEXPR'1
) ::= )
UNARYEXPR'1 ::= &
PARAMLIST'1 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
int ::= int
STATELIST ::= int ident STATELIST'5
ident ::= new_array
[ ::= [
STATELIST'5 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
ident ::= array_size
VARDECL_AUX2 ::= ident
] ::= ]
; ::= ;
VARDECL_AUX1'1 ::= &
int ::= int
STATELIST'1 ::= int ident STATELIST'5
ident ::= i
; ::= ;
STATELIST'5 ::= ; STATELIST'1
for ::= for
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
( ::= (
ident ::= i
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
= ::= =
UNARYEXPR'1 ::= &
int_constant ::= 0
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
; ::= ;
ATRIBSTAT_AUX1'1 ::= &
ident ::= i
EXPRESSION ::= ident EXPRESSION'1
< ::= <
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
ident ::= array_size
NUMEXPRESSION ::= ident NUMEXPRESSION'2
; ::= ;
NUMEXPRESSION'2 ::= &
ident ::= i
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
= ::= =
UNARYEXPR'1 ::= &
ident ::= i
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
+ ::= +
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'4
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= +
int_constant ::= 1
TERM ::= int_constant TERM'1
) ::= )
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
ATRIBSTAT_AUX1'4 ::= &
{ ::= {
STATEMENT ::= { STATELIST }
ident ::= new_array
STATELIST ::= ident STATELIST'4
[ ::= [
STATELIST'4 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
ident ::= i
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
] ::= ]
NUMEXPRESSION'2 ::= &
= ::= =
UNARYEXPR'1 ::= &
ident ::= array
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
[ ::= [
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
ident ::= array_size
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident NUMEXPRESSION'2
- ::= -
NUMEXPRESSION'2 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
ident ::= i
TERM ::= ident TERM'2
- ::= -
TERM'2 ::= &
NUMEXPRESSION_AUX1'1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= -
int_constant ::= 1
TERM ::= int_constant TERM'1
] ::= ]
TERM'1 ::= &
NUMEXPRESSION_AUX1'1 ::= &
; ::= ;
UNARYEXPR'1 ::= &
ATRIBSTAT_AUX1'1 ::= &
} ::= }
STATELIST'1 ::= &
return ::= return
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
ident ::= new_array
RETURNSTAT'1 ::= ident RETURNLIST'2
; ::= ;
RETURNLIST'2 ::= &
} ::= }
STATELIST'1 ::= &
$ ::= $
A'3 ::= &

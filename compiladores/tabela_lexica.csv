comment,~Quick Sort. Adaptado de <https://www.geeksforgeeks.org/quick-sort/>.~
def,def
ident,quickSort
(,(
int,int
ident,array
[,[
],]
",",","
int,int
ident,array_size
",",","
int,int
ident,low
",",","
int,int
ident,high
),)
{,{
int,int
ident,partition_i
;,;
int,int
ident,new_array
[,[
ident,array_size
],]
;,;
(,(
ident,partition_i
",",","
ident,new_array
),)
=,=
ident,partitionQuickSort
(,(
ident,array
",",","
ident,array_size
",",","
ident,low
",",","
ident,high
),)
;,;
ident,new_array
=,=
ident,quickSort
(,(
ident,new_array
",",","
ident,array_size
",",","
ident,low
",",","
ident,partition_i
-,-
int_constant,1
),)
;,;
ident,new_array
=,=
ident,quickSort
(,(
ident,new_array
",",","
ident,array_size
",",","
ident,partition_i
+,+
int_constant,1
",",","
ident,high
),)
;,;
return,return
ident,new_array
;,;
},}
def,def
ident,partitionQuickSort
(,(
int,int
ident,array
[,[
],]
",",","
int,int
ident,array_size
",",","
int,int
ident,low
",",","
int,int
ident,high
),)
{,{
int,int
ident,new_array
[,[
ident,array_size
],]
;,;
ident,new_array
=,=
ident,array
;,;
int,int
ident,pivot
;,;
ident,pivot
=,=
ident,high
;,;
int,int
ident,i
;,;
ident,i
=,=
ident,low
-,-
int_constant,1
;,;
int,int
ident,j
;,;
for,for
(,(
ident,j
=,=
int_constant,0
;,;
ident,j
<=,<=
ident,high
;,;
ident,j
=,=
ident,j
+,+
int_constant,1
),)
{,{
if,if
(,(
ident,new_array
[,[
ident,j
],]
<,<
ident,new_array
[,[
ident,high
],]
),)
{,{
ident,i
=,=
ident,i
+,+
int_constant,1
;,;
int,int
ident,aux
;,;
ident,aux
=,=
ident,new_array
[,[
ident,j
],]
;,;
ident,new_array
[,[
ident,j
],]
=,=
ident,new_array
[,[
ident,i
],]
;,;
ident,new_array
[,[
ident,i
],]
=,=
ident,aux
;,;
},}
},}
int,int
ident,aux
;,;
ident,aux
=,=
ident,new_array
[,[
ident,high
],]
;,;
ident,new_array
[,[
ident,high
],]
=,=
ident,new_array
[,[
ident,i
+,+
int_constant,1
],]
;,;
ident,new_array
[,[
ident,i
+,+
int_constant,1
],]
=,=
ident,aux
;,;
return,return
ident,i
+,+
int_constant,1
",",","
ident,new_array
;,;
},}
comment,~Heap Sort. Adaptado de <https://www.geeksforgeeks.org/heap-sort/>.~
comment,~Chamado de heap_sort na implementação original~
def,def
ident,sort
(,(
int,int
ident,array
[,[
],]
",",","
int,int
ident,array_size
),)
{,{
int,int
ident,new_array
[,[
ident,array_size
],]
;,;
ident,new_array
=,=
ident,buildHeap
(,(
ident,array
",",","
ident,array_size
),)
;,;
int,int
ident,i
;,;
for,for
(,(
ident,i
=,=
ident,array_size
-,-
int_constant,1
;,;
ident,i
>,>
int_constant,0
;,;
ident,i
=,=
ident,i
-,-
int_constant,1
),)
{,{
ident,new_array
=,=
ident,swap
(,(
ident,new_array
",",","
ident,i
",",","
ident,i
-,-
int_constant,1
),)
;,;
int,int
ident,heap_size
;,;
ident,heap_size
=,=
ident,i
;,;
ident,new_array
=,=
ident,heapify
(,(
ident,new_array
",",","
int_constant,0
",",","
ident,heap_size
),)
;,;
},}
ident,new_array
=,=
ident,reverse
(,(
ident,new_array
",",","
ident,array_size
),)
;,;
return,return
ident,new_array
;,;
},}
def,def
ident,buildHeap
(,(
int,int
ident,array
[,[
],]
",",","
int,int
ident,array_size
),)
{,{
int,int
ident,new_array
[,[
ident,array_size
],]
;,;
int,int
ident,i
;,;
for,for
(,(
ident,i
=,=
ident,array_size
;,;
ident,i
>=,>=
int_constant,0
;,;
ident,i
=,=
ident,i
-,-
int_constant,1
),)
{,{
ident,new_array
=,=
ident,heapify
(,(
ident,array
",",","
ident,array_size
",",","
ident,i
",",","
ident,array_size
),)
;,;
},}
return,return
ident,new_array
;,;
},}
def,def
ident,heapify
(,(
int,int
ident,array
[,[
],]
",",","
int,int
ident,array_size
",",","
int,int
ident,i
",",","
int,int
ident,heap_size
),)
{,{
int,int
ident,largest
;,;
int,int
ident,left
;,;
int,int
ident,right
;,;
ident,largest
=,=
ident,i
;,;
ident,left
=,=
int_constant,2
*,*
ident,i
+,+
int_constant,1
;,;
ident,right
=,=
int_constant,2
*,*
ident,i
+,+
int_constant,2
;,;
if,if
(,(
ident,left
<,<
ident,heap_size
),)
{,{
if,if
(,(
ident,array
[,[
ident,left
],]
>,>
ident,arr
[,[
ident,largest
],]
),)
{,{
ident,largest
=,=
ident,left
;,;
},}
},}
if,if
(,(
ident,right
<,<
ident,heap_size
),)
{,{
if,if
(,(
ident,array
[,[
ident,right
],]
>,>
ident,array
[,[
ident,largest
],]
),)
{,{
ident,largest
=,=
ident,right
;,;
},}
},}
int,int
ident,heap
[,[
ident,array_size
],]
;,;
if,if
(,(
ident,largest
!=,!=
ident,i
),)
{,{
ident,heap
=,=
ident,swap
(,(
ident,array
",",","
ident,i
",",","
ident,largest
),)
;,;
ident,heap
=,=
ident,heapify
(,(
ident,heap
",",","
ident,largest
",",","
ident,heap_size
),)
;,;
},}
return,return
ident,heap
;,;
},}
comment,~Chamado de main na implementação original.~
def,def
ident,heapSort
(,(
int,int
ident,array
[,[
],]
",",","
int,int
ident,array_size
),)
{,{
int,int
ident,sorted_array
[,[
ident,array_size
],]
;,;
ident,sorted_array
=,=
ident,sort
(,(
ident,array
",",","
ident,array_size
),)
;,;
return,return
ident,sorted_array
;,;
},}
comment,~Inexistente na implementação original.~
def,def
ident,swap
(,(
int,int
ident,array
[,[
],]
",",","
int,int
ident,i
",",","
int,int
ident,largest
),)
{,{
int,int
ident,aux
;,;
ident,aux
=,=
ident,array
[,[
ident,i
],]
;,;
ident,array
[,[
ident,i
],]
=,=
ident,array
[,[
ident,largest
],]
;,;
ident,array
[,[
ident,largest
],]
=,=
ident,aux
;,;
return,return
ident,array
;,;
},}
comment,~Inexistente na implementação original.~
def,def
ident,reverse
(,(
int,int
ident,array
[,[
],]
",",","
int,int
ident,array_size
),)
{,{
int,int
ident,new_array
[,[
ident,array_size
],]
;,;
int,int
ident,i
;,;
for,for
(,(
ident,i
=,=
int_constant,0
;,;
ident,i
<,<
ident,array_size
;,;
ident,i
=,=
ident,i
+,+
int_constant,1
),)
{,{
ident,new_array
[,[
ident,i
],]
=,=
ident,array
[,[
ident,array_size
-,-
ident,i
-,-
int_constant,1
],]
;,;
},}
return,return
ident,new_array
;,;
},}

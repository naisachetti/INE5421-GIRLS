def,def
ident,quickSort
(,(
int,int
ident,array
[,[
],]
",",","
int,int
ident,low
",",","
int,int
ident,high
),)
{,{
int,int
ident,partition_i
int,int
ident,new_array
[,[
],]
;,;
(,(
ident,partition_i
",",","
ident,new_array
),)
=,=
ident,partitionQuickSor
ident,t
(,(
ident,array
",",","
ident,low
",",","
ident,high
),)
;,;
ident,new_array
=,=
ident,quickSort
(,(
ident,new_array
",",","
ident,low
",",","
ident,partition_i
-,-
int_constant,1
),)
;,;
ident,new_array
=,=
ident,quickSort
(,(
ident,new_array
",",","
ident,partition_i
+,+
int_constant,1
",",","
ident,high
),)
;,;
return,return
ident,new_array
;,;
},}
def,def
ident,partitionQuickSor
ident,t
(,(
int,int
ident,array
[,[
],]
",",","
int,int
ident,low
",",","
int,int
ident,high
),)
{,{
int,int
ident,pivot
;,;
ident,pivot
=,=
ident,high
;,;
int,int
ident,i
;,;
ident,i
=,=
ident,low
-,-
int_constant,1
;,;
int,int
ident,j
;,;
for,for
(,(
ident,j
=,=
int_constant,0
;,;
ident,j
<=,<=
ident,high
;,;
ident,j
=,=
ident,j
+,+
int_constant,1
),)
{,{
if,if
(,(
ident,array
[,[
ident,j
],]
<,<
ident,array
[,[
ident,high
],]
),)
{,{
ident,i
=,=
ident,i
+,+
int_constant,1
;,;
int,int
ident,aux
;,;
ident,aux
=,=
ident,array
[,[
ident,j
],]
;,;
ident,array
[,[
ident,j
],]
=,=
ident,array
[,[
ident,i
],]
;,;
ident,array
[,[
ident,i
],]
=,=
ident,aux
;,;
},}
},}
int,int
ident,aux
;,;
ident,aux
=,=
ident,array
[,[
ident,high
],]
;,;
ident,array
[,[
ident,high
],]
=,=
ident,array
[,[
ident,i
+,+
int_constant,1
],]
;,;
ident,array
[,[
ident,i
+,+
int_constant,1
],]
=,=
ident,aux
;,;
return,return
(,(
ident,i
+,+
int_constant,1
",",","
ident,array
),)
;,;
},}
def,def
ident,heapSort
(,(
),)
{,{
},}
def,def
ident,mergeSort
(,(
),)
{,{
},}

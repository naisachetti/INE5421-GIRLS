comment,"~Funcoes supostamente nativas, placeholders~"
def,def
ident,floor
(,(
),)
{,{
return,return
;,;
},}
def,def
ident,strlen
(,(
),)
{,{
return,return
;,;
},}
comment,~Pega uma porção de uma string entre i_min e i_max (i_max não incluso)~
def,def
ident,slice
(,(
string,string
ident,word
",",","
int,int
ident,i_min
",",","
int,int
ident,i_max
),)
{,{
int,int
ident,slice_length
;,;
ident,slice_length
=,=
ident,i_max
-,-
ident,i_min
;,;
string,string
ident,portion
[,[
ident,slice_length
],]
;,;
int,int
ident,i
;,;
int,int
ident,i_portion
;,;
ident,i_portion
=,=
-,-
int_constant,1
;,;
for,for
(,(
ident,i
=,=
ident,i_min
;,;
ident,i
<,<
ident,i_max
;,;
ident,i
=,=
ident,i
+,+
int_constant,1
),)
{,{
ident,i_portion
=,=
ident,i_portion
+,+
int_constant,1
;,;
ident,portion
[,[
ident,i_portion
],]
=,=
ident,word
[,[
ident,i
],]
;,;
},}
return,return
ident,portion
;,;
},}
comment,~Procura por padrões não especificados dentro de uma string~
def,def
ident,mainPatternSearching
(,(
string,string
ident,sequence
),)
{,{
int,int
ident,seq_length
;,;
ident,seq_length
=,=
ident,strlen
(,(
ident,sequence
),)
;,;
int,int
ident,pattern_length
;,;
ident,pattern_length
=,=
ident,floor
(,(
ident,seq_length
/,/
float_constant,2.0
),)
;,;
int,int
ident,i_min
;,;
ident,i_min
=,=
int_constant,0
;,;
int,int
ident,i_max
;,;
ident,i_max
=,=
ident,pattern_length
-,-
int_constant,1
;,;
int,int
ident,i
;,;
comment,~Equivalente a while(True)~
for,for
(,(
ident,i
=,=
int_constant,0
;,;
ident,i
==,==
ident,i
;,;
ident,i
=,=
ident,i
),)
{,{
comment,~São procuradas sequências com tamanho mínimo de 2 caracteres~
if,if
(,(
ident,pattern_length
<=,<=
int_constant,1
),)
{,{
break,break
;,;
},}
if,if
(,(
ident,i_max
+,+
int_constant,1
+,+
ident,pattern_length
<,<
ident,seq_length
-,-
int_constant,1
),)
{,{
string,string
ident,pattern
[,[
ident,pattern_length
],]
;,;
ident,pattern
=,=
ident,slice
(,(
ident,sequence
",",","
ident,i_min
",",","
ident,i_max
+,+
int_constant,1
),)
;,;
ident,naivePatternSearching
(,(
ident,sequence
",",","
ident,pattern
",",","
ident,i_max
+,+
int_constant,1
),)
;,;
ident,i_min
=,=
ident,i_min
+,+
int_constant,1
;,;
ident,i_max
=,=
ident,i_max
+,+
int_constant,1
;,;
},}
else,else
{,{
ident,pattern_length
=,=
ident,pattern_length
-,-
int_constant,1
;,;
ident,i_min
=,=
int_constant,0
;,;
ident,i_max
=,=
ident,pattern_length
-,-
int_constant,1
;,;
},}
},}
},}
comment,~Algoritmo ingênuo. Adaptado de <https://www.geeksforgeeks.org/naive-algorithm-for-pattern-searching/>.~
def,def
ident,naivePatternSearching
(,(
string,string
ident,sequence
",",","
string,string
ident,pattern
",",","
int,int
ident,i_start
),)
{,{
int,int
ident,seq_length
;,;
ident,seq_length
=,=
ident,strlen
(,(
ident,sequence
),)
;,;
int,int
ident,pattern_length
;,;
ident,pattern_length
=,=
ident,strlen
(,(
ident,pattern
),)
;,;
int,int
ident,i_min
;,;
ident,i_min
=,=
ident,i_start
;,;
int,int
ident,found
;,;
ident,found
=,=
int_constant,0
;,;
int,int
ident,i
;,;
comment,~Equivalente a while(True)~
for,for
(,(
ident,i
=,=
int_constant,0
;,;
ident,i
==,==
ident,i
;,;
ident,i
=,=
ident,i
),)
{,{
if,if
(,(
ident,i_min
+,+
int_constant,1
+,+
ident,pattern_length
>=,>=
ident,seq_length
),)
{,{
break,break
;,;
},}
if,if
(,(
ident,sequence
[,[
ident,i_min
],]
==,==
ident,pattern
[,[
int_constant,0
],]
),)
{,{
int,int
ident,j
;,;
for,for
(,(
ident,j
=,=
int_constant,1
;,;
ident,j
<,<
ident,pattern_length
;,;
ident,i
=,=
ident,i
+,+
int_constant,1
),)
{,{
if,if
(,(
ident,sequence
[,[
ident,i_min
+,+
ident,j
],]
!=,!=
ident,pattern
[,[
ident,j
],]
),)
{,{
ident,i_min
=,=
ident,i_min
+,+
int_constant,1
;,;
break,break
;,;
},}
if,if
(,(
ident,j
==,==
ident,pattern_length
-,-
int_constant,1
),)
{,{
string,string
ident,out
;,;
ident,out
=,=
ident,pattern
;,;
print,print
(,(
ident,out
),)
;,;
ident,found
=,=
int_constant,1
;,;
break,break
;,;
},}
},}
},}
if,if
(,(
ident,found
!=,!=
int_constant,0
),)
{,{
break,break
;,;
},}
},}
},}
comment,~Algoritmo de Rabin-Karp. Adaptado de <https://www.geeksforgeeks.org/rabin-karp-algorithm-for-pattern-searching/>.~
def,def
ident,rabinKarpPatternSearch
(,(
string,string
ident,pattern
",",","
string,string
ident,sequence
",",","
int,int
ident,prime_number
),)
{,{
int,int
ident,m
;,;
int,int
ident,n
;,;
int,int
ident,i
;,;
int,int
ident,d
;,;
int,int
ident,j
;,;
int,int
ident,q
;,;
int,int
ident,p
;,;
int,int
ident,t
;,;
int,int
ident,h
;,;
ident,m
=,=
ident,strlen
(,(
ident,pattern
),)
;,;
ident,n
=,=
ident,strlen
(,(
ident,sequence
),)
;,;
ident,p
=,=
int_constant,0
;,;
ident,t
=,=
int_constant,0
;,;
ident,h
=,=
int_constant,0
;,;
for,for
(,(
ident,i
=,=
int_constant,0
;,;
ident,i
<,<
ident,m
-,-
int_constant,1
;,;
ident,i
=,=
ident,i
+,+
int_constant,1
),)
ident,h
=,=
(,(
ident,h
*,*
ident,d
),)
%,%
ident,q
;,;
for,for
(,(
ident,i
=,=
int_constant,0
;,;
ident,i
<,<
ident,m
;,;
ident,i
=,=
ident,i
+,+
int_constant,1
),)
{,{
ident,p
=,=
(,(
ident,d
*,*
ident,p
),)
%,%
ident,q
;,;
ident,t
=,=
(,(
ident,d
*,*
ident,t
),)
%,%
ident,q
;,;
},}
for,for
(,(
ident,i
=,=
int_constant,0
;,;
ident,i
<=,<=
ident,n
-,-
ident,m
;,;
ident,i
=,=
ident,i
+,+
int_constant,1
),)
{,{
if,if
(,(
ident,p
==,==
ident,t
),)
{,{
for,for
(,(
ident,j
=,=
int_constant,0
;,;
ident,j
<,<
ident,m
;,;
ident,j
=,=
ident,j
+,+
int_constant,1
),)
{,{
if,if
(,(
ident,sequence
[,[
ident,i
+,+
ident,j
],]
!=,!=
ident,pattern
[,[
ident,j
],]
),)
{,{
break,break
;,;
},}
},}
if,if
(,(
ident,j
==,==
ident,m
),)
{,{
string,string
ident,out
;,;
print,print
(,(
ident,out
),)
;,;
},}
},}
if,if
(,(
ident,i
<,<
ident,n
-,-
ident,m
),)
{,{
ident,t
=,=
(,(
ident,sequence
[,[
ident,i
],]
+,+
ident,sequence
[,[
ident,i
+,+
ident,m
],]
),)
;,;
if,if
(,(
ident,t
<,<
int_constant,0
),)
{,{
ident,t
=,=
(,(
ident,t
+,+
ident,q
),)
;,;
},}
},}
},}
},}
$,$

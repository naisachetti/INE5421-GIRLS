A ::= { STATELIST }
{ ::= {
STATELIST ::= int ident \escopo_atual.declare(@"int",@self.filhos[1].lex_val@) STATELIST'4
int ::= int
ident ::= a
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= int ident \escopo_atual.declare(@"int",@self.filhos[1].lex_val@) STATELIST'4
int ::= int
ident ::= b
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= { STATELIST } STATELIST'1
{ ::= {
STATELIST ::= ident STATELIST'5
ident ::= a
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \self.node@=@self.left_node
= ::= =
ATRIBSTAT_AUX1 ::= int_constant \self.filhos[2].left_node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@) ATRIBSTAT_AUX1'1 \self.node@=@self.filhos[2].node
int_constant ::= 10
ATRIBSTAT_AUX1'1 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \self.filhos[3].left_node@=@self.filhos[1].node NUMEXPRESSION_AUX1'1 \self.right_node@=@self.filhos[3].node \self.node@=@ExpressionNode(@self.filhos[0].lex_val@,@self.left_node@,@self.right_node@)
SIGNAL ::= + \self.lex_val@=@self.filhos[0].lex_val
+ ::= +
TERM ::= ident \self.filhos[2].left_node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@) TERM'2 \self.node@=@self.filhos[2].node
ident ::= b
TERM'2 ::= & \self.node@=@self.left_node
NUMEXPRESSION_AUX1'1 ::= & \self.node@=@self.left_node
ATRIBSTAT_AUX1'3 ::= & \self.node@=@self.left_node
; ::= ;
STATELIST'1 ::= break ; STATELIST'1
break ::= break
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'1 ::= &
} ::= }

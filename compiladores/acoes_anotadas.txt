A ::= def ident ( A'1
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= &
STATEMENT ::= { STATELIST }
STATELIST ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
VARDECL_AUX2 ::= ident
VARDECL_AUX1'1 ::= &
STATELIST'1 ::= MULTIATRIBSTAT ; STATELIST'1
MULTIATRIBSTAT ::= ( LEFTMULTIATRIBSTAT ) = MULTIATRIBSTAT'1
LEFTMULTIATRIBSTAT ::= ident LEFTMULTIATRIBSTAT'1
LEFTMULTIATRIBSTAT'1 ::= , LEFTMULTIATRIBSTAT
LEFTMULTIATRIBSTAT ::= ident LEFTMULTIATRIBSTAT'1
LEFTMULTIATRIBSTAT'1 ::= &
MULTIATRIBSTAT'1 ::= ident ( FUNCCALL'1
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= &
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= NUMEXPRESSION_AUX1 PARAMLISTCALL'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= - \SIGNAL.op@=@-
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
PARAMLISTCALL'3 ::= &
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= NUMEXPRESSION_AUX1 PARAMLISTCALL'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= + \SIGNAL.op@=@+
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
PARAMLISTCALL'3 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= &
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
RETURNSTAT'1 ::= ident RETURNLIST'2
RETURNLIST'2 ::= &
STATELIST'1 ::= &
A'3 ::= def ident ( A'1
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= &
STATEMENT ::= { STATELIST }
STATELIST ::= int ident STATELIST'4
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
VARDECL_AUX2 ::= ident
VARDECL_AUX1'1 ::= &
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= &
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= &
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= - \SIGNAL.op@=@-
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
ATRIBSTAT_AUX1'3 ::= & \ATRIBSTAT_AUX1'3.node@=@ATRIBSTAT_AUX1'3.left_node
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
ATRIBSTAT_AUX1'1 ::= & \ATRIBSTAT_AUX1'1.node@=@ATRIBSTAT_AUX1'1.left_node
EXPRESSION ::= ident \EXPRESSION'1.left_node@=@newNode(ident.lexval,-,-) EXPRESSION'1 \EXPRESSION.node@=@EXPRESSION'1.node
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <=
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= + \SIGNAL.op@=@+
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
ATRIBSTAT_AUX1'3 ::= & \ATRIBSTAT_AUX1'3.node@=@ATRIBSTAT_AUX1'3.left_node
STATEMENT ::= { STATELIST }
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
EXPRESSION ::= ident \EXPRESSION'1.left_node@=@newNode(ident.lexval,-,-) EXPRESSION'1 \EXPRESSION.node@=@EXPRESSION'1.node
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
NUMEXPRESSION'1 ::= & \NUMEXPRESSION'1.node@=@NUMEXPRESSION'1.left_node
STATELIST ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= + \SIGNAL.op@=@+
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
ATRIBSTAT_AUX1'3 ::= & \ATRIBSTAT_AUX1'3.node@=@ATRIBSTAT_AUX1'3.left_node
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1'1 ::= & \ATRIBSTAT_AUX1'1.node@=@ATRIBSTAT_AUX1'1.left_node
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1'1 ::= & \ATRIBSTAT_AUX1'1.node@=@ATRIBSTAT_AUX1'1.left_node
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= &
STATELIST'1 ::= &
STATELIST'2 ::= &
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1'1 ::= & \ATRIBSTAT_AUX1'1.node@=@ATRIBSTAT_AUX1'1.left_node
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION'2.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION'2.node@=@newNode(SIGNAL.op,NUMEXPRESSION'2.left_node,NUMEXPRESSION'2.right_node)
SIGNAL ::= + \SIGNAL.op@=@+
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1'1 ::= & \ATRIBSTAT_AUX1'1.node@=@ATRIBSTAT_AUX1'1.left_node
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION'2.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION'2.node@=@newNode(SIGNAL.op,NUMEXPRESSION'2.left_node,NUMEXPRESSION'2.right_node)
SIGNAL ::= + \SIGNAL.op@=@+
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= &
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
RETURNSTAT'1 ::= ident RETURNLIST'2
RETURNLIST'2 ::= NUMEXPRESSION_AUX1 RETURNLIST'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= + \SIGNAL.op@=@+
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
RETURNLIST'3 ::= , RETURNSTAT'1
RETURNSTAT'1 ::= ident RETURNLIST'2
RETURNLIST'2 ::= &
STATELIST'1 ::= &
A'3 ::= def ident ( A'1
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= &
STATEMENT ::= { STATELIST }
STATELIST ::= int ident STATELIST'4
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
VARDECL_AUX2 ::= ident
VARDECL_AUX1'1 ::= &
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= &
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= - \SIGNAL.op@=@-
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
ATRIBSTAT_AUX1'3 ::= & \ATRIBSTAT_AUX1'3.node@=@ATRIBSTAT_AUX1'3.left_node
EXPRESSION ::= ident \EXPRESSION'1.left_node@=@newNode(ident.lexval,-,-) EXPRESSION'1 \EXPRESSION.node@=@EXPRESSION'1.node
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >
NUMEXPRESSION ::= int_constant \NUMEXPRESSION'1.left_node@=@newNode(int_constant.lexval,-,-) NUMEXPRESSION'1 \NUMEXPRESSION.node@=@NUMEXPRESSION'1.node
NUMEXPRESSION'1 ::= & \NUMEXPRESSION'1.node@=@NUMEXPRESSION'1.left_node
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= - \SIGNAL.op@=@-
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
ATRIBSTAT_AUX1'3 ::= & \ATRIBSTAT_AUX1'3.node@=@ATRIBSTAT_AUX1'3.left_node
STATEMENT ::= { STATELIST }
STATELIST ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= NUMEXPRESSION_AUX1 PARAMLISTCALL'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= - \SIGNAL.op@=@-
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
PARAMLISTCALL'3 ::= &
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= &
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= int_constant PARAMLISTCALL'1
PARAMLISTCALL'1 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= &
STATELIST'1 ::= &
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= &
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
RETURNSTAT'1 ::= ident RETURNLIST'2
RETURNLIST'2 ::= &
STATELIST'1 ::= &
A'3 ::= def ident ( A'1
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= &
STATEMENT ::= { STATELIST }
STATELIST ::= int ident STATELIST'4
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
VARDECL_AUX2 ::= ident
VARDECL_AUX1'1 ::= &
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= &
EXPRESSION ::= ident \EXPRESSION'1.left_node@=@newNode(ident.lexval,-,-) EXPRESSION'1 \EXPRESSION.node@=@EXPRESSION'1.node
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >=
NUMEXPRESSION ::= int_constant \NUMEXPRESSION'1.left_node@=@newNode(int_constant.lexval,-,-) NUMEXPRESSION'1 \NUMEXPRESSION.node@=@NUMEXPRESSION'1.node
NUMEXPRESSION'1 ::= & \NUMEXPRESSION'1.node@=@NUMEXPRESSION'1.left_node
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= - \SIGNAL.op@=@-
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
ATRIBSTAT_AUX1'3 ::= & \ATRIBSTAT_AUX1'3.node@=@ATRIBSTAT_AUX1'3.left_node
STATEMENT ::= { STATELIST }
STATELIST ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= &
STATELIST'1 ::= &
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
RETURNSTAT'1 ::= ident RETURNLIST'2
RETURNLIST'2 ::= &
STATELIST'1 ::= &
A'3 ::= def ident ( A'1
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= &
STATEMENT ::= { STATELIST }
STATELIST ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= &
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
ATRIBSTAT_AUX1'1 ::= TERM_AUX1 ATRIBSTAT_AUX1'4
TERM_AUX1 ::= OPERATION UNARYEXPR \TERM'1.left_node@=@UNARYEXPR.node TERM'1 \TERM_AUX1.right_node@=@TERM'1.node \TERM_AUX1.node@=@newNode(OPERATION.op,TERM_AUX1.left_node,TERM_AUX1.right_node)
OPERATION ::= * \OPERATOR.op@=@*
UNARYEXPR ::= ident \UNARYEXPR'1.left_node@=@newNode(ident.lexval,-,-) UNARYEXPR'1 \UNARYEXPR.node@=@UNARYEXPR'1.node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
ATRIBSTAT_AUX1'4 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= + \SIGNAL.op@=@+
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
ATRIBSTAT_AUX1'3 ::= & \ATRIBSTAT_AUX1'3.node@=@ATRIBSTAT_AUX1'3.left_node
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
ATRIBSTAT_AUX1'1 ::= TERM_AUX1 ATRIBSTAT_AUX1'4
TERM_AUX1 ::= OPERATION UNARYEXPR \TERM'1.left_node@=@UNARYEXPR.node TERM'1 \TERM_AUX1.right_node@=@TERM'1.node \TERM_AUX1.node@=@newNode(OPERATION.op,TERM_AUX1.left_node,TERM_AUX1.right_node)
OPERATION ::= * \OPERATOR.op@=@*
UNARYEXPR ::= ident \UNARYEXPR'1.left_node@=@newNode(ident.lexval,-,-) UNARYEXPR'1 \UNARYEXPR.node@=@UNARYEXPR'1.node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
ATRIBSTAT_AUX1'4 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= + \SIGNAL.op@=@+
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
ATRIBSTAT_AUX1'3 ::= & \ATRIBSTAT_AUX1'3.node@=@ATRIBSTAT_AUX1'3.left_node
STATELIST'1 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
EXPRESSION ::= ident \EXPRESSION'1.left_node@=@newNode(ident.lexval,-,-) EXPRESSION'1 \EXPRESSION.node@=@EXPRESSION'1.node
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
EXPRESSION ::= ident \EXPRESSION'1.left_node@=@newNode(ident.lexval,-,-) EXPRESSION'1 \EXPRESSION.node@=@EXPRESSION'1.node
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
NUMEXPRESSION'1 ::= & \NUMEXPRESSION'1.node@=@NUMEXPRESSION'1.left_node
STATELIST ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= &
STATELIST'1 ::= &
STATELIST'2 ::= &
STATELIST'2 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
EXPRESSION ::= ident \EXPRESSION'1.left_node@=@newNode(ident.lexval,-,-) EXPRESSION'1 \EXPRESSION.node@=@EXPRESSION'1.node
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
STATELIST ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
EXPRESSION ::= ident \EXPRESSION'1.left_node@=@newNode(ident.lexval,-,-) EXPRESSION'1 \EXPRESSION.node@=@EXPRESSION'1.node
EXPRESSION'1 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= LVALUE_AUX1 NUMEXPRESSION'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
NUMEXPRESSION'1 ::= & \NUMEXPRESSION'1.node@=@NUMEXPRESSION'1.left_node
STATELIST ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= &
STATELIST'1 ::= &
STATELIST'2 ::= &
STATELIST'2 ::= int ident STATELIST'4
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
VARDECL_AUX2 ::= ident
VARDECL_AUX1'1 ::= &
STATELIST'1 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
EXPRESSION ::= ident \EXPRESSION'1.left_node@=@newNode(ident.lexval,-,-) EXPRESSION'1 \EXPRESSION.node@=@EXPRESSION'1.node
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= !=
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
STATELIST ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= &
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= &
STATELIST'1 ::= &
STATELIST'2 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
RETURNSTAT'1 ::= ident RETURNLIST'2
RETURNLIST'2 ::= &
STATELIST'1 ::= &
A'3 ::= def ident ( A'1
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= &
STATEMENT ::= { STATELIST }
STATELIST ::= int ident STATELIST'4
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
VARDECL_AUX2 ::= ident
VARDECL_AUX1'1 ::= &
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= ( FUNCCALL'1
FUNCCALL'1 ::= PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= , PARAMLISTCALL
PARAMLISTCALL ::= ident PARAMLISTCALL'2
PARAMLISTCALL'2 ::= &
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
RETURNSTAT'1 ::= ident RETURNLIST'2
RETURNLIST'2 ::= &
STATELIST'1 ::= &
A'3 ::= def ident ( A'1
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= &
STATEMENT ::= { STATELIST }
STATELIST ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1'1 ::= & \ATRIBSTAT_AUX1'1.node@=@ATRIBSTAT_AUX1'1.left_node
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1'1 ::= & \ATRIBSTAT_AUX1'1.node@=@ATRIBSTAT_AUX1'1.left_node
STATELIST'1 ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= &
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
RETURNSTAT'1 ::= ident RETURNLIST'2
RETURNLIST'2 ::= &
STATELIST'1 ::= &
A'3 ::= def ident ( A'1
A'1 ::= PARAMLIST ) STATEMENT A'3
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= ] UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= , PARAMLIST
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= int
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
PARAMLIST'1 ::= &
STATEMENT ::= { STATELIST }
STATELIST ::= int ident STATELIST'4
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
VARDECL_AUX2 ::= ident
VARDECL_AUX1'1 ::= &
STATELIST'1 ::= int ident STATELIST'4
STATELIST'4 ::= ; STATELIST'1
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= int_constant ATRIBSTAT_AUX1'1
ATRIBSTAT_AUX1'1 ::= & \ATRIBSTAT_AUX1'1.node@=@ATRIBSTAT_AUX1'1.left_node
EXPRESSION ::= ident \EXPRESSION'1.left_node@=@newNode(ident.lexval,-,-) EXPRESSION'1 \EXPRESSION.node@=@EXPRESSION'1.node
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION_AUX1.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION_AUX1.node@=@newNode(SIGNAL.op,NUMEXPRESSION_AUX1.left_node,NUMEXPRESSION_AUX1.right_node)
SIGNAL ::= + \SIGNAL.op@=@+
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
ATRIBSTAT_AUX1'3 ::= & \ATRIBSTAT_AUX1'3.node@=@ATRIBSTAT_AUX1'3.left_node
STATEMENT ::= { STATELIST }
STATELIST ::= ident STATELIST'5
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= & \NUMEXPRESSION'2.node@=@NUMEXPRESSION'2.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1 ::= ident ATRIBSTAT_AUX1'2
ATRIBSTAT_AUX1'2 ::= LVALUE_AUX1 ATRIBSTAT_AUX1'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= NUMEXPRESSION ] UNARYEXPR'1
NUMEXPRESSION ::= ident \NUMEXPRESSION'2.left_node@=@newNode(ident.lexval,-,-) NUMEXPRESSION'2 \NUMEXPRESSION.node@=@NUMEXPRESSION'2.node
NUMEXPRESSION'2 ::= SIGNAL TERM \NUMEXPRESSION_AUX1'1.left_node@=@TERM.node NUMEXPRESSION_AUX1'1 \NUMEXPRESSION'2.right_node@=@NUMEXPRESSION_AUX1'1.node \NUMEXPRESSION'2.node@=@newNode(SIGNAL.op,NUMEXPRESSION'2.left_node,NUMEXPRESSION'2.right_node)
SIGNAL ::= - \SIGNAL.op@=@-
TERM ::= ident \TERM'2.left_node@=@newNode(ident.lexval,-,-) TERM'2 \TERM.node@=@TERM'2.node
TERM'2 ::= & \TERM'2.node@=@TERM'2.left_node
NUMEXPRESSION_AUX1'1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
SIGNAL ::= - \SIGNAL.op@=@-
TERM ::= int_constant \TERM'1.left_node@=@newNode(int_constant.lexval,-,-) TERM'1 \TERM.node@=@TERM'1.node
TERM'1 ::= & \TERM'1.node@=@TERM'1.left_node
NUMEXPRESSION_AUX1'1 ::= & \NUMEXPRESSION_AUX1'1.node@=@NUMEXPRESSION_AUX1'1.left_node
UNARYEXPR'1 ::= & \UNARYEXPR'1.node@=@UNARYEXPR'1.left_node
ATRIBSTAT_AUX1'1 ::= & \ATRIBSTAT_AUX1'1.node@=@ATRIBSTAT_AUX1'1.left_node
STATELIST'1 ::= &
STATELIST'1 ::= RETURNSTAT ; STATELIST'1
RETURNSTAT ::= return RETURNSTAT'1
RETURNSTAT'1 ::= ident RETURNLIST'2
RETURNLIST'2 ::= &
STATELIST'1 ::= &
A'3 ::= &

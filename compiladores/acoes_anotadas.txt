A ::= { STATELIST }
{ ::= {
STATELIST ::= int ident \escopo_atual.declare(@"int",@self.filhos[1].lex_val@) STATELIST'4
int ::= int
ident ::= i
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= i
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \self.node@=@self.left_node
= ::= =
ATRIBSTAT_AUX1 ::= int_constant \self.filhos[2].left_node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@) ATRIBSTAT_AUX1'1 \self.node@=@self.filhos[2].node
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= & \self.node@=@self.left_node
; ::= ;
STATELIST'1 ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1
for ::= for
( ::= (
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= & \self.node@=@self.left_node
= ::= =
ATRIBSTAT_AUX1 ::= int_constant \self.filhos[2].left_node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@) ATRIBSTAT_AUX1'1 \self.node@=@self.filhos[2].node
int_constant ::= 0
ATRIBSTAT_AUX1'1 ::= & \self.node@=@self.left_node
; ::= ;
EXPRESSION ::= ident \self.filhos[2].left_node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@) EXPRESSION'1 \self.node@=@self.filhos[2].node
ident ::= i
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= <
< ::= <
NUMEXPRESSION ::= int_constant \self.filhos[2].left_node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@) NUMEXPRESSION'1 \self.node@=@self.filhos[2].node
int_constant ::= 10
NUMEXPRESSION'1 ::= & \self.node@=@self.left_node
; ::= ;
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
LVALUE ::= ident UNARYEXPR'1
ident ::= i
UNARYEXPR'1 ::= & \self.node@=@self.left_node
= ::= =
ATRIBSTAT_AUX1 ::= ident \self.filhos[2].left_node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@) ATRIBSTAT_AUX1'2 \self.node@=@self.filhos[2].node
ident ::= i
ATRIBSTAT_AUX1'2 ::= \self.filhos[1].left_node@=@self.left_node NUMEXPRESSION_AUX1 \self.node@=@self.filhos[1].node ATRIBSTAT_AUX1'3
NUMEXPRESSION_AUX1 ::= SIGNAL TERM \self.filhos[3].left_node@=@self.filhos[1].node NUMEXPRESSION_AUX1'1 \self.right_node@=@self.filhos[3].node \self.node@=@ExpressionNode(@self.filhos[0].lex_val@,@self.left_node@,@self.right_node@)
SIGNAL ::= + \self.lex_val@=@self.filhos[0].lex_val
+ ::= +
TERM ::= int_constant \self.filhos[2].left_node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@) TERM'1 \self.node@=@self.filhos[2].node
int_constant ::= 1
TERM'1 ::= & \self.node@=@self.left_node
NUMEXPRESSION_AUX1'1 ::= & \self.node@=@self.left_node
ATRIBSTAT_AUX1'3 ::= &
) ::= )
STATEMENT ::= { STATELIST }
{ ::= {
STATELIST ::= int ident \escopo_atual.declare(@"int",@self.filhos[1].lex_val@) STATELIST'4
int ::= int
ident ::= b
STATELIST'4 ::= ; STATELIST'1
; ::= ;
STATELIST'1 ::= ident STATELIST'5
ident ::= b
STATELIST'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1
UNARYEXPR'1 ::= & \self.node@=@self.left_node
= ::= =
ATRIBSTAT_AUX1 ::= ident \self.filhos[2].left_node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@) ATRIBSTAT_AUX1'2 \self.node@=@self.filhos[2].node
ident ::= i
ATRIBSTAT_AUX1'2 ::= \self.filhos[1].left_node@=@self.left_node TERM_AUX1 \self.filhos[3].left_node@=@self.filhos[1].node ATRIBSTAT_AUX1'4 \self.node@=@self.filhos[3].node
TERM_AUX1 ::= OPERATION UNARYEXPR \self.filhos[3].left_node@=@self.filhos[1].node TERM'1 \self.right_node@=@self.filhos[3].node \self.node@=@ExpressionNode(@self.filhos[0].lex_val@,@self.left_node@,@self.right_node@)
OPERATION ::= * \self.lex_val@=@self.filhos[0].lex_val
* ::= *
UNARYEXPR ::= int_constant \self.node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@)
int_constant ::= 5
TERM'1 ::= & \self.node@=@self.left_node
ATRIBSTAT_AUX1'4 ::= & \self.node@=@self.left_node
; ::= ;
STATELIST'1 ::= if ( EXPRESSION ) { STATELIST } STATELIST'2
if ::= if
( ::= (
EXPRESSION ::= ident \self.filhos[2].left_node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@) EXPRESSION'1 \self.node@=@self.filhos[2].node
ident ::= b
EXPRESSION'1 ::= COMPARE NUMEXPRESSION
COMPARE ::= >=
>= ::= >=
NUMEXPRESSION ::= int_constant \self.filhos[2].left_node@=@ExpressionNode(@self.filhos[0].lex_val@,@None@,@None@) NUMEXPRESSION'1 \self.node@=@self.filhos[2].node
int_constant ::= 5
NUMEXPRESSION'1 ::= & \self.node@=@self.left_node
) ::= )
{ ::= {
STATELIST ::= break ; STATELIST'1
break ::= break
; ::= ;
STATELIST'1 ::= &
} ::= }
STATELIST'2 ::= &
} ::= }
STATELIST'1 ::= &
} ::= }

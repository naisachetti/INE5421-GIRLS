A ::= & | break ; | VARDECL ; | ; | { STATELIST } | print EXPRESSION ; | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) AUX1 | read ident AUX10'1 ; | return RETURNSTAT ; | if ( A'1 | def ident ( A'2 | ident A'7
AUX1 ::= break ; | VARDECL ; | ; | { STATELIST } | print EXPRESSION ; | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) AUX1 | read ident AUX10'1 ; | if ( A'1 | return AUX1'1 | ident AUX1'3
ATRIBSTAT ::= ident AUX10'1 = AUX3
AUX3 ::= ident AUX3'1 | float_constant AUX3'2 | null AUX3'2 | string_constant AUX3'2 | int_constant AUX3'2 | new TYPE [ AUX20 | ( AUX3'3 | [ AUX3'4 | SIGNAL AUX3'5
AUX10 ::= float_constant | null | ( NUMEXPRESSION ) | string_constant | int_constant | ident AUX10'1 | [ = ARRAYCONTENTS ]
AUX14 ::= float_constant AUX14'1 | null AUX14'1 | string_constant AUX14'1 | int_constant AUX14'1 | ( AUX14'2 | [ AUX14'3 | ident AUX14'4 | SIGNAL AUX14'5
STATELIST ::= ident STATELIST'1 | ; STATELIST'2 | break ; STATELIST'2 | VARDECL ; STATELIST'2 | { STATELIST'3 | print STATELIST'4 | read STATELIST'5 | return STATELIST'6 | if ( STATELIST'7 | for ( STATELIST'8
VARDECL ::= TYPE ident VARDECL'1
EXPRESSION ::= float_constant AUX3'2 | null AUX3'2 | string_constant AUX3'2 | int_constant AUX3'2 | ( AUX3'3 | [ AUX3'4 | SIGNAL AUX3'5 | ident EXPRESSION'1
AUX21 ::= COMPARE NUMEXPRESSION
NUMEXPRESSION ::= float_constant NUMEXPRESSION'1 | null NUMEXPRESSION'1 | string_constant NUMEXPRESSION'1 | int_constant NUMEXPRESSION'1 | ( NUMEXPRESSION'2 | [ NUMEXPRESSION'3 | ident NUMEXPRESSION'4 | SIGNAL NUMEXPRESSION'5
AUX22 ::= SIGNAL AUX22'1
TERM ::= float_constant TERM'1 | null TERM'1 | string_constant TERM'1 | int_constant TERM'1 | ( TERM'2 | [ TERM'3 | ident TERM'4 | SIGNAL TERM'5
AUX23 ::= OPERATION AUX23'1
UNARYEXPR ::= float_constant | null | ( NUMEXPRESSION ) | string_constant | int_constant | SIGNAL AUX10 | ident AUX10'1 | [ = ARRAYCONTENTS ]
AUX25 ::= TYPE AUX25'1
TYPE ::= string | float | int
COMPARE ::= != | > | >= | <= | < | ==
SIGNAL ::= + | -
OPERATION ::= / | % | *
AUX3'1 ::= & | ( FUNCCALL | [ AUX17 AUX3'2 | AUX23 AUX3'6 | AUX22 AUX3'7 | COMPARE NUMEXPRESSION
AUX3'2 ::= & | AUX23 AUX3'6 | AUX22 AUX3'7 | COMPARE NUMEXPRESSION
AUX10'1 ::= & | [ AUX17
AUX14'1 ::= & | , RETURNSTAT | AUX23 AUX14'6 | AUX22 AUX14'7
NUMEXPRESSION'1 ::= & | AUX23 NUMEXPRESSION'6 | SIGNAL AUX22'1
AUX22'1 ::= TERM NUMEXPRESSION'6
TERM'1 ::= & | OPERATION AUX23'1
AUX23'1 ::= UNARYEXPR TERM'1
AUX25'1 ::= ident AUX10'1 AUX25'2
AUX25'2 ::= & | , AUX25'3
AUX25'3 ::= & | TYPE AUX25'1
STATELIST'1 ::= ( STATELIST'9 | AUX10'1 = STATELIST'10
FUNCCALL ::= ) | ident AUX13 )
STATELIST'2 ::= & | ident STATELIST'1 | ; STATELIST'2 | break ; STATELIST'2 | VARDECL ; STATELIST'2 | { STATELIST'3 | print STATELIST'4 | read STATELIST'5 | return STATELIST'6 | if ( STATELIST'7 | for ( STATELIST'8
STATELIST'3 ::= STATELIST } STATELIST'2
STATELIST'4 ::= EXPRESSION ; STATELIST'2
STATELIST'5 ::= ident AUX10'1 ; STATELIST'2
STATELIST'6 ::= ; STATELIST'2 | AUX14 ; STATELIST'2
STATELIST'7 ::= EXPRESSION ) STATELIST'11
STATELIST'8 ::= ATRIBSTAT ; STATELIST'12
STATELIST'9 ::= ) ; STATELIST'2 | ident AUX13 ) ; STATELIST'2
STATELIST'10 ::= AUX3 ; STATELIST'2
STATELIST'11 ::= AUX1 STATELIST'13
STATELIST'12 ::= EXPRESSION ; STATELIST'15
STATELIST'13 ::= & | else STATELIST'14 | ident STATELIST'1 | ; STATELIST'2 | break ; STATELIST'2 | VARDECL ; STATELIST'2 | { STATELIST'3 | print STATELIST'4 | read STATELIST'5 | return STATELIST'6 | if ( STATELIST'7 | for ( STATELIST'8
STATELIST'14 ::= AUX1 STATELIST'2
STATELIST'15 ::= ATRIBSTAT ) STATELIST'14
VARDECL'1 ::= & | [ int_constant ] VARDECL'1
AUX20 ::= NUMEXPRESSION ] AUX20'1
AUX20'1 ::= & | [ AUX20
RETURNSTAT ::= & | float_constant AUX14'1 | null AUX14'1 | string_constant AUX14'1 | int_constant AUX14'1 | ( AUX14'2 | [ AUX14'3 | ident AUX14'4 | SIGNAL AUX14'5
AUX17 ::= NUMEXPRESSION ] AUX10'1
AUX3'3 ::= NUMEXPRESSION ) AUX3'2
AUX3'4 ::= = ARRAYCONTENTS ] AUX3'2
AUX3'5 ::= AUX10 AUX3'2
AUX3'6 ::= & | AUX22 AUX3'7 | COMPARE NUMEXPRESSION
AUX3'7 ::= & | COMPARE NUMEXPRESSION
ARRAYCONTENTS ::= EXPRESSION ARRAYCONTENTS'1
ARRAYCONTENTS'1 ::= & | , = ARRAYCONTENTS
A'1 ::= EXPRESSION ) A'3
A'2 ::= ) { A'5 | AUX25 ) { A'5
A'3 ::= AUX1 A'4
A'4 ::= else AUX1 | &
A'5 ::= STATELIST } A'6
A'6 ::= & | def ident ( A'2
AUX1'1 ::= ; | AUX14 ;
AUX1'2 ::= ) ; | ident AUX13 ) ;
AUX13 ::= & | , AUX13'1
AUX13'1 ::= & | ident AUX13
NUMEXPRESSION'2 ::= NUMEXPRESSION ) NUMEXPRESSION'1
NUMEXPRESSION'3 ::= = ARRAYCONTENTS ] NUMEXPRESSION'1
NUMEXPRESSION'4 ::= & | [ AUX17 NUMEXPRESSION'1 | AUX23 NUMEXPRESSION'6 | SIGNAL AUX22'1
NUMEXPRESSION'5 ::= AUX10 NUMEXPRESSION'1
NUMEXPRESSION'6 ::= & | SIGNAL AUX22'1
TERM'2 ::= NUMEXPRESSION ) TERM'1
TERM'3 ::= = ARRAYCONTENTS ] TERM'1
TERM'4 ::= & | [ AUX17 TERM'1 | OPERATION AUX23'1
TERM'5 ::= AUX10 TERM'1
EXPRESSION'1 ::= & | [ AUX17 AUX3'2 | AUX23 AUX3'6 | AUX22 AUX3'7 | COMPARE NUMEXPRESSION
A'7 ::= ( FUNCCALL ; | AUX10'1 = AUX3 ;
AUX1'3 ::= ( AUX1'2 | AUX10'1 = AUX3 ;
AUX14'2 ::= NUMEXPRESSION ) AUX14'1
AUX14'3 ::= = ARRAYCONTENTS ] AUX14'1
AUX14'4 ::= & | , RETURNSTAT | [ AUX17 AUX14'1 | AUX23 AUX14'6 | AUX22 AUX14'7
AUX14'5 ::= AUX10 AUX14'1
AUX14'6 ::= & | , RETURNSTAT | AUX22 AUX14'7
AUX14'7 ::= & | , RETURNSTAT

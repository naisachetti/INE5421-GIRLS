A ::= & | PRINTSTAT ; | RETURNSTAT ; | VARDECL ; | MULTIATRIBSTAT ; | READSTAT ; | ; | break ; | { STATELIST } | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT | if ( EXPRESSION ) { STATELIST } A'1 | def ident ( A'2 | ident A'5
FUNCLIST ::= def ident ( A'2
PARAMLIST ::= TYPE LVALUE PARAMLIST'1
TYPE ::= float | int | string
STATEMENT ::= PRINTSTAT ; | RETURNSTAT ; | VARDECL ; | MULTIATRIBSTAT ; | READSTAT ; | ; | break ; | { STATELIST } | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT | if ( EXPRESSION ) { STATELIST } A'1 | ident A'5
VARDECL ::= float ident VARDECL_AUX1'1 | int ident VARDECL_AUX1'1 | string ident VARDECL_AUX1'1
VARDECL_AUX1 ::= [ VARDECL_AUX2 ] VARDECL_AUX1'1
VARDECL_AUX2 ::= int_constant | ident
STATELIST ::= RETURNSTAT ; STATELIST'1 | READSTAT ; STATELIST'1 | break ; STATELIST'1 | MULTIATRIBSTAT ; STATELIST'1 | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1 | PRINTSTAT ; STATELIST'1 | { STATELIST } STATELIST'1 | ; STATELIST'1 | if ( EXPRESSION ) { STATELIST } STATELIST'2 | string ident STATELIST'4 | int ident STATELIST'4 | float ident STATELIST'4 | ident STATELIST'5
ATRIBSTAT ::= LVALUE = ATRIBSTAT_AUX1
ATRIBSTAT_AUX1 ::= new TYPE ALLOCEXPRESSION_AUX1 | SIGNAL FACTOR ATRIBSTAT_AUX1'1 | string_constant ATRIBSTAT_AUX1'1 | ( NUMEXPRESSION ) ATRIBSTAT_AUX1'1 | float_constant ATRIBSTAT_AUX1'1 | int_constant ATRIBSTAT_AUX1'1 | null ATRIBSTAT_AUX1'1 | ident ATRIBSTAT_AUX1'2
MULTIATRIBSTAT ::= ( LEFTMULTIATRIBSTAT ) = MULTIATRIBSTAT'1
LEFTMULTIATRIBSTAT ::= ident LEFTMULTIATRIBSTAT'1
RIGHTMULTIATRIBSTAT ::= SIGNAL FACTOR RIGHTMULTIATRIBSTAT'1 | string_constant RIGHTMULTIATRIBSTAT'1 | ( NUMEXPRESSION ) RIGHTMULTIATRIBSTAT'1 | float_constant RIGHTMULTIATRIBSTAT'1 | int_constant RIGHTMULTIATRIBSTAT'1 | null RIGHTMULTIATRIBSTAT'1 | new TYPE ALLOCEXPRESSION_AUX1 RIGHTMULTIATRIBSTAT'2 | ident RIGHTMULTIATRIBSTAT'3
FUNCCALL ::= ident ( FUNCCALL'1
PARAMLISTCALL ::= SIGNAL FACTOR PARAMLISTCALL'1 | string_constant PARAMLISTCALL'1 | ( NUMEXPRESSION ) PARAMLISTCALL'1 | float_constant PARAMLISTCALL'1 | int_constant PARAMLISTCALL'1 | null PARAMLISTCALL'1 | ident PARAMLISTCALL'2
RETURNLIST ::= SIGNAL FACTOR RETURNLIST'1 | string_constant RETURNLIST'1 | ( NUMEXPRESSION ) RETURNLIST'1 | float_constant RETURNLIST'1 | int_constant RETURNLIST'1 | null RETURNLIST'1 | ident RETURNLIST'2
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return RETURNSTAT'1
ELIFSTAT ::= elif ( EXPRESSION ) { STATELIST } ELIFSTAT'1
ELSESTAT ::= else { STATELIST }
ALLOCEXPRESSION_AUX1 ::= [ NUMEXPRESSION ] ALLOCEXPRESSION_AUX1'1
EXPRESSION ::= SIGNAL FACTOR ATRIBSTAT_AUX1'1 | string_constant ATRIBSTAT_AUX1'1 | ( NUMEXPRESSION ) ATRIBSTAT_AUX1'1 | float_constant ATRIBSTAT_AUX1'1 | int_constant ATRIBSTAT_AUX1'1 | null ATRIBSTAT_AUX1'1 | ident EXPRESSION'1
EXPRESSION_AUX1 ::= COMPARE NUMEXPRESSION
NUMEXPRESSION ::= SIGNAL FACTOR NUMEXPRESSION'1 | string_constant NUMEXPRESSION'1 | ( NUMEXPRESSION ) NUMEXPRESSION'1 | float_constant NUMEXPRESSION'1 | int_constant NUMEXPRESSION'1 | null NUMEXPRESSION'1 | ident NUMEXPRESSION'2
NUMEXPRESSION_AUX1 ::= SIGNAL TERM NUMEXPRESSION_AUX1'1
TERM ::= SIGNAL FACTOR TERM'1 | string_constant TERM'1 | ( NUMEXPRESSION ) TERM'1 | float_constant TERM'1 | int_constant TERM'1 | null TERM'1 | ident TERM'2
TERM_AUX1 ::= OPERATION UNARYEXPR TERM'1
UNARYEXPR ::= string_constant | ( NUMEXPRESSION ) | float_constant | int_constant | null | SIGNAL FACTOR | ident UNARYEXPR'1
FACTOR ::= string_constant | ( NUMEXPRESSION ) | float_constant | int_constant | null | ident UNARYEXPR'1
LVALUE ::= ident UNARYEXPR'1
LVALUE_AUX1 ::= [ LVALUE_AUX1'1
COMPARE ::= == | != | <= | >= | < | >
SIGNAL ::= + | -
OPERATION ::= / | % | *
A'1 ::= & | ELIFSTAT A'3 | else { STATELIST }
A'2 ::= ) STATEMENT A'4 | PARAMLIST ) STATEMENT A'4
PARAMLIST'1 ::= & | , PARAMLIST
VARDECL_AUX1'1 ::= & | [ VARDECL_AUX2 ] VARDECL_AUX1'1
STATELIST'1 ::= & | RETURNSTAT ; STATELIST'1 | READSTAT ; STATELIST'1 | break ; STATELIST'1 | MULTIATRIBSTAT ; STATELIST'1 | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1 | PRINTSTAT ; STATELIST'1 | { STATELIST } STATELIST'1 | ; STATELIST'1 | if ( EXPRESSION ) { STATELIST } STATELIST'2 | string ident STATELIST'4 | int ident STATELIST'4 | float ident STATELIST'4 | ident STATELIST'5
ATRIBSTAT_AUX1'1 ::= & | NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3 | TERM_AUX1 ATRIBSTAT_AUX1'4 | COMPARE NUMEXPRESSION
MULTIATRIBSTAT'1 ::= ( RIGHTMULTIATRIBSTAT ) | ident ( FUNCCALL'1
LEFTMULTIATRIBSTAT'1 ::= & | , LEFTMULTIATRIBSTAT | LVALUE_AUX1 LEFTMULTIATRIBSTAT'2
RIGHTMULTIATRIBSTAT'1 ::= & | , RIGHTMULTIATRIBSTAT | EXPRESSION_AUX1 RIGHTMULTIATRIBSTAT'2 | NUMEXPRESSION_AUX1 RIGHTMULTIATRIBSTAT'4 | TERM_AUX1 RIGHTMULTIATRIBSTAT'5
FUNCCALL'1 ::= PARAMLISTCALL ) | )
PARAMLISTCALL'1 ::= & | , PARAMLISTCALL | NUMEXPRESSION_AUX1 PARAMLISTCALL'3 | TERM_AUX1 PARAMLISTCALL'4
RETURNLIST'1 ::= & | , RETURNSTAT'1 | NUMEXPRESSION_AUX1 RETURNLIST'3 | TERM_AUX1 RETURNLIST'4
RETURNSTAT'1 ::= & | SIGNAL FACTOR RETURNLIST'1 | string_constant RETURNLIST'1 | ( NUMEXPRESSION ) RETURNLIST'1 | float_constant RETURNLIST'1 | int_constant RETURNLIST'1 | null RETURNLIST'1 | ident RETURNLIST'2
ELIFSTAT'1 ::= & | elif ( EXPRESSION ) { STATELIST } ELIFSTAT'1
ALLOCEXPRESSION_AUX1'1 ::= & | [ NUMEXPRESSION ] ALLOCEXPRESSION_AUX1'1
NUMEXPRESSION'1 ::= & | TERM_AUX1 NUMEXPRESSION_AUX1'1 | SIGNAL TERM NUMEXPRESSION_AUX1'1
NUMEXPRESSION_AUX1'1 ::= & | SIGNAL TERM NUMEXPRESSION_AUX1'1
TERM'1 ::= & | OPERATION UNARYEXPR TERM'1
UNARYEXPR'1 ::= & | [ LVALUE_AUX1'1
LVALUE_AUX1'1 ::= ] UNARYEXPR'1 | NUMEXPRESSION ] UNARYEXPR'1
A'3 ::= & | else { STATELIST }
A'4 ::= & | def ident ( A'2
LEFTMULTIATRIBSTAT'2 ::= & | , LEFTMULTIATRIBSTAT
RETURNLIST'2 ::= & | , RETURNSTAT'1 | LVALUE_AUX1 RETURNLIST'1 | NUMEXPRESSION_AUX1 RETURNLIST'3 | TERM_AUX1 RETURNLIST'4
RETURNLIST'3 ::= & | , RETURNSTAT'1
RETURNLIST'4 ::= & | , RETURNSTAT'1 | NUMEXPRESSION_AUX1 RETURNLIST'3
ATRIBSTAT_AUX1'2 ::= & | ( FUNCCALL'1 | LVALUE_AUX1 ATRIBSTAT_AUX1'1 | NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3 | TERM_AUX1 ATRIBSTAT_AUX1'4 | COMPARE NUMEXPRESSION
ATRIBSTAT_AUX1'3 ::= & | COMPARE NUMEXPRESSION
ATRIBSTAT_AUX1'4 ::= & | NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3 | COMPARE NUMEXPRESSION
RIGHTMULTIATRIBSTAT'2 ::= & | , RIGHTMULTIATRIBSTAT
RIGHTMULTIATRIBSTAT'3 ::= & | , RIGHTMULTIATRIBSTAT | LVALUE_AUX1 RIGHTMULTIATRIBSTAT'1 | EXPRESSION_AUX1 RIGHTMULTIATRIBSTAT'2 | NUMEXPRESSION_AUX1 RIGHTMULTIATRIBSTAT'4 | TERM_AUX1 RIGHTMULTIATRIBSTAT'5 | ( RIGHTMULTIATRIBSTAT'6
RIGHTMULTIATRIBSTAT'4 ::= & | , RIGHTMULTIATRIBSTAT | EXPRESSION_AUX1 RIGHTMULTIATRIBSTAT'2
RIGHTMULTIATRIBSTAT'5 ::= & | , RIGHTMULTIATRIBSTAT | EXPRESSION_AUX1 RIGHTMULTIATRIBSTAT'2 | NUMEXPRESSION_AUX1 RIGHTMULTIATRIBSTAT'4
RIGHTMULTIATRIBSTAT'6 ::= PARAMLISTCALL ) RIGHTMULTIATRIBSTAT'2 | ) RIGHTMULTIATRIBSTAT'2
TERM'2 ::= & | LVALUE_AUX1 TERM'1 | OPERATION UNARYEXPR TERM'1
EXPRESSION'1 ::= & | LVALUE_AUX1 ATRIBSTAT_AUX1'1 | NUMEXPRESSION_AUX1 ATRIBSTAT_AUX1'3 | TERM_AUX1 ATRIBSTAT_AUX1'4 | COMPARE NUMEXPRESSION
STATELIST'2 ::= & | ELSESTAT STATELIST'1 | ELIFSTAT STATELIST'3 | RETURNSTAT ; STATELIST'1 | READSTAT ; STATELIST'1 | break ; STATELIST'1 | MULTIATRIBSTAT ; STATELIST'1 | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1 | PRINTSTAT ; STATELIST'1 | { STATELIST } STATELIST'1 | ; STATELIST'1 | if ( EXPRESSION ) { STATELIST } STATELIST'2 | string ident STATELIST'4 | int ident STATELIST'4 | float ident STATELIST'4 | ident STATELIST'5
STATELIST'3 ::= & | ELSESTAT STATELIST'1 | RETURNSTAT ; STATELIST'1 | READSTAT ; STATELIST'1 | break ; STATELIST'1 | MULTIATRIBSTAT ; STATELIST'1 | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'1 | PRINTSTAT ; STATELIST'1 | { STATELIST } STATELIST'1 | ; STATELIST'1 | if ( EXPRESSION ) { STATELIST } STATELIST'2 | string ident STATELIST'4 | int ident STATELIST'4 | float ident STATELIST'4 | ident STATELIST'5
NUMEXPRESSION'2 ::= & | TERM_AUX1 NUMEXPRESSION_AUX1'1 | LVALUE_AUX1 NUMEXPRESSION'1 | SIGNAL TERM NUMEXPRESSION_AUX1'1
PARAMLISTCALL'2 ::= & | , PARAMLISTCALL | LVALUE_AUX1 PARAMLISTCALL'1 | NUMEXPRESSION_AUX1 PARAMLISTCALL'3 | TERM_AUX1 PARAMLISTCALL'4
PARAMLISTCALL'3 ::= & | , PARAMLISTCALL
PARAMLISTCALL'4 ::= & | , PARAMLISTCALL | NUMEXPRESSION_AUX1 PARAMLISTCALL'3
A'5 ::= UNARYEXPR'1 = ATRIBSTAT_AUX1 ; | ( FUNCCALL'1 ;
STATELIST'4 ::= VARDECL_AUX1 ; STATELIST'1 | ; STATELIST'1
STATELIST'5 ::= ( FUNCCALL'1 ; STATELIST'1 | UNARYEXPR'1 = ATRIBSTAT_AUX1 ; STATELIST'1

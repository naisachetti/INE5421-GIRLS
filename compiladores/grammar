PROGRAM ::=  ( STATEMENT | FUNCLIST ) ?
FUNCLIST ::= FUNCDEF FUNCLIST | FUNCDEF
FUNCDEF ::= def ident \( PARAMLIST \) { STATELIST }
PARAMLIST ::=  (  ( int | float | string ) LVALUE , PARAMLIST |  ( int | float | string ) LVALUE ) ?
STATEMENT ::=  ( VARDECL ;  | ATRIBSTAT ;  | PRINTSTAT ;  | READSTAT ; | FUNCALL; | RETURNSTAT ;  | IFSTAT | FORSTAT | { STATELIST } | break ;  |  ;  ) 
VARDECL ::=  ( int | float | string ) ident ( [ int_constant ] ) *
ATRIBSTAT ::= LVALUE = ( EXPRESSION | ALLOCEXPRESSION | FUNCCALL ) 
MULTIATRIBSTAT ::=  \( LEFTATRIBSTAT \) = \( RIGHTATRIBSTAT \)
LEFTMULTIATRIBSTAT ::= LVALUE , LEFTATRIBSTAT | LVALUE
RIGHTMULTIATRIBSTAT ::= ( EXPRESSION | ALLOCEXPRESSION | FUNCCALL ), RIGHTATRIBSTAT | ( EXPRESSION | ALLOCEXPRESSION | FUNCCALL )
FUNCCALL ::= ident \( PARAMLISTCALL \) 
PARAMLISTCALL ::=  ( ident , PARAMLISTCALL | ident ) ?
RETURNLIST ::= (NUMEXPRESSION, RETURNLIST | NUMEXPRESSION) ?
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return RETURNLIST
IFSTAT ::= if \( EXPRESSION \) STATEMENT ( else STATEMENT ) ?
FORSTAT ::= for \( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT \) STATEMENT
STATELIST ::= STATEMENT ( STATELIST ) ?
ALLOCEXPRESSION ::= new ( int | float | string )  ( [ NUMEXPRESSION ] ) +
EXPRESSION ::= NUMEXPRESSION (  ( < | > | <= | >= | == | != ) NUMEXPRESSION ) ?
NUMEXPRESSION ::= TERM (  ( \+ | - ) TERM ) *
TERM ::= UNARYEXPR (  ( \* | / | % ) UNARYEXPR ) *
UNARYEXPR ::=  (  ( \+ | - )  ) ? FACTOR
FACTOR ::=  ( int_constant | float_constant | string_constant | null | LVALUE |  \( NUMEXPRESSION \) | ARRAY ) 
LVALUE ::= ident ( [ NUMEXPRESSION ] ) *
ARRAY ::= \[ ARRAYCONTENTS \]
ARRAYCONTENTS ::== EXPRESSION ( , ARRAYCONTENTS ) ?
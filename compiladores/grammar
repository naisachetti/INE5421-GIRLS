PROGRAM ::=  ( STATEMENT | FUNCLIST ) ?
FUNCLIST ::= FUNCDEF FUNCLIST | FUNCDEF
FUNCDEF ::= def ident \( PARAMLIST \) { STATELIST }
PARAMLIST ::=  (  ( int | float | string ) LVALUE , PARAMLIST |  ( int | float | string ) LVALUE ) ?
STATEMENT ::=  ( VARDECL ;  | ATRIBSTAT ;  | MULTIATRIBSTAT ; | PRINTSTAT ;  | READSTAT ; | FUNCCALL ; | RETURNSTAT ;  | IFSTAT | FORSTAT | { STATELIST } | break ;  |  ;  ) 
VARDECL ::=  ( int | float | string ) ident ( [ ( int_constant | ident ) ] ) *
ATRIBSTAT ::= LVALUE = ( EXPRESSION | ALLOCEXPRESSION | FUNCCALL ) 
MULTIATRIBSTAT ::=  \( LEFTMULTIATRIBSTAT \) = ( \( RIGHTMULTIATRIBSTAT \) | FUNCCALL )
LEFTMULTIATRIBSTAT ::= LVALUE , LEFTMULTIATRIBSTAT | LVALUE
RIGHTMULTIATRIBSTAT ::= ( EXPRESSION | ALLOCEXPRESSION | FUNCCALL ) , RIGHTMULTIATRIBSTAT | ( EXPRESSION | ALLOCEXPRESSION | FUNCCALL )
FUNCCALL ::= ident \( PARAMLISTCALL \) 
PARAMLISTCALL ::=  ( ( ident | NUMEXPRESSION ) , PARAMLISTCALL | ( ident | NUMEXPRESSION ) ) ?
RETURNLIST ::= ( NUMEXPRESSION , RETURNLIST | NUMEXPRESSION ) ?
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return RETURNLIST
IFSTAT ::= if \( EXPRESSION \) { STATEMENT } ( elif \( EXPRESSION \) { STATEMENT } ) * ( else { STATEMENT } ) ?
FORSTAT ::= for \( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT \) STATEMENT
STATELIST ::= STATEMENT ( STATELIST ) ?
ALLOCEXPRESSION ::= new ( int | float | string )  ( [ NUMEXPRESSION ] ) +
EXPRESSION ::= NUMEXPRESSION (  ( < | > | <= | >= | == | != ) NUMEXPRESSION ) ?
NUMEXPRESSION ::= TERM (  ( \+ | - ) TERM ) *
TERM ::= UNARYEXPR (  ( \* | / | % ) UNARYEXPR ) *
UNARYEXPR ::=  (  ( \+ | - )  ) ? FACTOR
FACTOR ::=  ( int_constant | float_constant | string_constant | null | LVALUE |  \( NUMEXPRESSION \) | ARRAY ) 
LVALUE ::= ident ( [ ( NUMEXPRESSION | LVALUE ) ? ] ) *
ARRAY ::= [ ARRAYCONTENTS ]
ARRAYCONTENTS ::== EXPRESSION ( , ARRAYCONTENTS ) ?
PROGRAM ::= AUX12
FUNCLIST ::= FUNCDEF FUNCLIST | FUNCDEF
FUNCDEF ::= def ident ( PARAMLIST ) { STATELIST }
FUNCCALL ::= ident ( PARAMLISTCALL )
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return
FORSTAT ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT
AUX0 ::= int | float | string
STATEMENT ::= AUX1
AUX1 ::= VARDECL ; | ATRIBSTAT ; | PRINTSTAT ; | READSTAT ; | RETURNSTAT ; | IFSTAT | FORSTAT | { STATELIST } | break ; | ;
AUX2 ::= int | float | string
ATRIBSTAT ::= LVALUE = AUX3
AUX3 ::= EXPRESSION | ALLOCEXPRESSION | FUNCCALL
AUX4 ::= int | float | string
AUX5 ::= < | > | <= | >= | == | !=
AUX6 ::= + | -
AUX7 ::= * | / | %
AUX8 ::= + | -
FACTOR ::= AUX9
AUX9 ::= int_constant | float_constant | string_constant | null | LVALUE | ( NUMEXPRESSION )
LVALUE ::= ident AUX10
AUX10 ::= [ NUMEXPRESSION ]
AUX11 ::= int | float | string
AUX12 ::= STATEMENT | FUNCLIST | &
PARAMLISTCALL ::= AUX13
AUX13 ::= ident , PARAMLISTCALL | ident | &
IFSTAT ::= if ( EXPRESSION ) STATEMENT AUX14
AUX14 ::= else STATEMENT | &
STATELIST ::= STATEMENT AUX15
AUX15 ::= STATELIST | &
VARDECL ::= AUX2 ident AUX16
AUX16 ::= [ int_constant ] AUX16 | &
ALLOCEXPRESSION ::= new AUX4 AUX17
AUX17 ::= [ NUMEXPRESSION ] AUX17 | [ NUMEXPRESSION ]
EXPRESSION ::= NUMEXPRESSION AUX18
AUX18 ::= AUX5 NUMEXPRESSION | &
NUMEXPRESSION ::= TERM AUX19
AUX19 ::= AUX6 TERM AUX19 | &
TERM ::= UNARYEXPR AUX20
AUX20 ::= AUX7 UNARYEXPR AUX20 | &
UNARYEXPR ::= AUX21 FACTOR
AUX21 ::= AUX8 | &
PARAMLIST ::= AUX22
AUX22 ::= AUX0 ident , PARAMLIST | AUX11 ident | &

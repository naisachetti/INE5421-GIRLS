PROGRAM ::= AUX17
FUNCLIST ::= FUNCDEF FUNCLIST | FUNCDEF
FUNCDEF ::= def ident ( PARAMLIST ) STATEMENT
LEFTMULTIATRIBSTAT ::= LVALUE , LEFTMULTIATRIBSTAT | LVALUE
FUNCCALL ::= ident ( PARAMLISTCALL )
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return RETURNLIST
FORSTAT ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT
ARRAY ::= [ ARRAYCONTENTS ]
AUX0 ::= int | float | string
STATEMENT ::= AUX1
AUX2 ::= int | float | string
ATRIBSTAT ::= LVALUE = AUX3
AUX3 ::= EXPRESSION | ALLOCEXPRESSION | FUNCCALL
MULTIATRIBSTAT ::= ( LEFTMULTIATRIBSTAT ) = AUX4
AUX4 ::= ( RIGHTMULTIATRIBSTAT ) | FUNCCALL
AUX5 ::= EXPRESSION | ALLOCEXPRESSION | FUNCCALL
AUX6 ::= ident | NUMEXPRESSION
AUX7 ::= int | float | string
AUX8 ::= < | > | <= | >= | == | !=
AUX9 ::= + | -
AUX10 ::= * | / | %
AUX11 ::= + | -
FACTOR ::= AUX12
AUX12 ::= int_constant | float_constant | string_constant | null | LVALUE | ( NUMEXPRESSION ) | ARRAY
AUX13 ::= int | float | string
AUX14 ::= int_constant | ident
RIGHTMULTIATRIBSTAT ::= AUX5 , RIGHTMULTIATRIBSTAT | AUX15
AUX15 ::= EXPRESSION | ALLOCEXPRESSION | FUNCCALL
AUX16 ::= ident | NUMEXPRESSION
AUX17 ::= STATEMENT | FUNCLIST | &
RETURNLIST ::= AUX18
AUX18 ::= NUMEXPRESSION , RETURNLIST | NUMEXPRESSION | &
AUX19 ::= STATEMENT AUX19 | STATEMENT
AUX20 ::= NUMEXPRESSION | LVALUE | &
ARRAYCONTENTS ::= = EXPRESSION AUX21
AUX21 ::= , ARRAYCONTENTS | &
AUX1 ::= { AUX22 } | VARDECL ; | ATRIBSTAT ; | MULTIATRIBSTAT ; | PRINTSTAT ; | READSTAT ; | FUNCCALL ; | RETURNSTAT ; | IFSTAT | FORSTAT | break ; | ;
AUX22 ::= STATEMENT AUX22 | STATEMENT
ALLOCEXPRESSION ::= new AUX7 AUX23
AUX23 ::= [ NUMEXPRESSION ] AUX23 | [ NUMEXPRESSION ]
EXPRESSION ::= NUMEXPRESSION AUX24
AUX24 ::= AUX8 NUMEXPRESSION | &
NUMEXPRESSION ::= TERM AUX25
AUX25 ::= AUX9 TERM AUX25 | &
TERM ::= UNARYEXPR AUX26
AUX26 ::= AUX10 UNARYEXPR AUX26 | &
UNARYEXPR ::= AUX27 FACTOR
AUX27 ::= AUX11 | &
PARAMLIST ::= AUX28
AUX28 ::= AUX0 LVALUE , PARAMLIST | AUX13 LVALUE | &
VARDECL ::= AUX2 ident AUX29
AUX29 ::= [ AUX14 ] AUX29 | &
PARAMLISTCALL ::= AUX30
AUX30 ::= AUX6 , PARAMLISTCALL | AUX16 | &
AUX31 ::= STATEMENT AUX31 | STATEMENT
LVALUE ::= ident AUX32
AUX32 ::= [ AUX20 ] AUX32 | &
AUX33 ::= elif ( EXPRESSION ) { AUX31 } AUX33 | &
IFSTAT ::= if ( EXPRESSION ) { AUX19 } AUX33 AUX34
AUX34 ::= else { STATEMENT } | &

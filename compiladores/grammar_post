PROGRAM ::= AUX17
FUNCLIST ::= FUNCDEF FUNCLIST | FUNCDEF
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return
FUNCDEF ::= def ident AUX0 { STATELIST }
AUX0 ::= PARAMLIST
AUX1 ::= int | float | string
STATEMENT ::= AUX2
AUX2 ::= VARDECL ; | ATRIBSTAT ; | PRINTSTAT ; | READSTAT ; | RETURNSTAT ; | IFSTAT | FORSTAT | { STATELIST } | break ; | ;
AUX3 ::= int | float | string
ATRIBSTAT ::= LVALUE = AUX4
AUX4 ::= EXPRESSION | ALLOCEXPRESSION | FUNCCALL
FUNCCALL ::= ident AUX5
AUX5 ::= PARAMLISTCALL
AUX6 ::= EXPRESSION
FORSTAT ::= for AUX7 STATEMENT
AUX7 ::= ATRIBSTAT ; EXPRESSION ; ATRIBSTAT
AUX8 ::= int | float | string
AUX9 ::= < | > | <= | >= | == | !=
AUX10 ::= + | -
AUX11 ::= * | / | %
AUX12 ::= + | -
AUX13 ::= NUMEXPRESSION
LVALUE ::= ident AUX14
AUX14 ::= [ NUMEXPRESSION ]
AUX15 ::= int | float | string
FACTOR ::= AUX16
AUX16 ::= int constant | float constant | string constant | null | LVALUE | AUX13
AUX17 ::= STATEMENT | FUNCLIST | &
PARAMLISTCALL ::= AUX18
AUX18 ::= ident , PARAMLISTCALL | ident | &
STATELIST ::= STATEMENT AUX19
AUX19 ::= STATELIST | &
VARDECL ::= AUX3 ident AUX20
AUX20 ::= [ int constant ] AUX20 | &
IFSTAT ::= if AUX6 STATEMENT AUX21
AUX21 ::= else STATEMENT | &
ALLOCEXPRESSION ::= new AUX8 AUX22
AUX22 ::= [ NUMEXPRESSION ] AUX22 | [ NUMEXPRESSION ]
EXPRESSION ::= NUMEXPRESSION AUX23
AUX23 ::= AUX9 NUMEXPRESSION | &
NUMEXPRESSION ::= TERM AUX24
AUX24 ::= AUX10 TERM AUX24 | &
TERM ::= UNARYEXPR AUX25
AUX25 ::= AUX11 UNARYEXPR AUX25 | &
UNARYEXPR ::= AUX26 FACTOR
AUX26 ::= AUX12 | &
PARAMLIST ::= AUX27
AUX27 ::= AUX1 ident , PARAMLIST | AUX15 ident | &

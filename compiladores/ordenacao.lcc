~Quick Sort. Adaptado de <https://www.geeksforgeeks.org/quick-sort/>.~

def quickSort(int array[], int array_size, int low, int high) {
	int partition_i;
    int new_array[array_size];
    (partition_i, new_array) = partitionQuickSort(array, array_size, low, high);
    new_array = quickSort(new_array, array_size, low, partition_i-1);
    new_array = quickSort(new_array, array_size, partition_i+1, high);
    return new_array;
}

def partitionQuickSort(int array[], int array_size, int low, int high) {
    int new_array[array_size];
    new_array = array;
    int pivot;
    pivot = high;
    int i;
    i = low-1;
    int j;
    for(j=0; j<=high; j=j+1) {
        if(new_array[j]<new_array[high]) {
            i = i+1;
            int aux;
            aux = new_array[j];
            new_array[j] = new_array[i];
            new_array[i] = aux;
        }
    }
    int aux;
    aux = new_array[high];
    new_array[high] = new_array[i+1];
    new_array[i+1] = aux;
    return (i+1, new_array);
}

~Heap Sort. Adaptado de <https://www.geeksforgeeks.org/heap-sort/>.~

~Chamado de heap_sort na implementação original~
def sort(int array[], int array_size) {
    int new_array[array_size];
    new_array = buildHeap(array, array_size);

    int i;
    for(i=array_size-1; i>0; i=i-1) {
        new_array = swap(new_array, i, i-1);

        int heap_size;
        heap_size = i;
        new_array = heapify(new_array, 0, heap_size);
    }

    new_array = reverse(new_array, array_size);
    return new_array; 
}

def buildHeap(int array[], int array_size) {
    int new_array[array_size];
    int i;
    for (i=array_size; i>=0; i=i-1) {
        new_array = heapify(array, array_size, i, array_size);
    }
    return new_array;
}

def heapify(int array[], int array_size, int i, int heap_size) {
    int largest;
    int left;
    int right;
    largest = i;
    left = 2*i+1;
    right = 2*i+2;

    if (left < heap_size) {
        if (array[left] > arr[largest]) {
            largest = left;
        }
    }

    if (right < heap_size) {
        if (array[right] > array[largest]) {
            largest = right;
        }
    }

    int heap[array_size];
    if (largest != i) {
        heap = swap(array, i, largest);
        heap = heapify(heap, largest, heap_size);
    }
    return heap;
}

~Chamado de main na implementação original.~
def heapSort(int array[], int array_size) {
    int sorted_array[array_size];
    sorted_array = sort(array, array_size);
    return sorted_array;
}

~Inexistente na implementação original.~
def swap(int array[], int i, int largest) {
    int aux;
    aux = array[i];
    array[i] = array[largest];
    array[largest] = aux;
    return array;
}

~Inexistente na implementação original.~
def reverse(int array[], int array_size) {
    int new_array[array_size];
    int i;
    for (i=0; i<array_size; i=i+1){
        new_array[i] = array[array_size-i-1];
    }
    return new_array;
}
A ::= & | { STATELIST } | ; | break ; | print EXPRESSION ; | if ( EXPRESSION ) { AUX1 } A'1 | def ident ( A'2 | read ident AUX10'1 ; | for ( ident AUX10'1 = AUX3 ; EXPRESSION ; ident AUX10'1 = AUX3 ) AUX1 | ident A'5 | TYPE ident VARDECL ; | return RETURNSTAT ;
A'1 ::= & | else { AUX1 } | elif ( EXPRESSION ) { AUX1 } AUX17 A'3
A'2 ::= ) { STATELIST } A'4 | TYPE ident AUX10'1 AUX26 ) { STATELIST } A'4
A'3 ::= & | else { AUX1 }
A'4 ::= & | def ident ( A'2
A'5 ::= AUX10'1 = AUX3 ; | ( FUNCCALL ;
ARRAYCONTENTS ::= & | , = EXPRESSION ARRAYCONTENTS
AUX1 ::= { STATELIST } | ; | break ; | print EXPRESSION ; | return AUX1'1 | read ident AUX10'1 ; | for ( ident AUX10'1 = AUX3 ; EXPRESSION ; ident AUX10'1 = AUX3 ) AUX1 | if ( EXPRESSION ) { AUX1 } A'1 | ident AUX1'2 | TYPE ident VARDECL ;
AUX1'1 ::= ; | AUX16 ;
AUX1'2 ::= ( AUX1'3 | AUX10'1 = AUX3 ;
AUX1'3 ::= ) ; | ident AUX15 ) ;
AUX10 ::= null | string_constant | int_constant | float_constant | ( AUX11 ) | ident AUX10'1 | [ = EXPRESSION ARRAYCONTENTS ]
AUX10'1 ::= & | [ AUX25
AUX11 ::= SIGNAL AUX10 AUX11'1 | null AUX11'1 | string_constant AUX11'1 | ( AUX11 ) AUX11'1 | int_constant AUX11'1 | float_constant AUX11'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX11'1 | ident AUX11'2
AUX11'1 ::= & | SIGNAL TERM AUX22 | OPERATION UNARYEXPR TERM'1 AUX22
AUX11'2 ::= & | SIGNAL TERM AUX22 | OPERATION UNARYEXPR TERM'1 AUX22 | [ AUX25 AUX11'1
AUX13 ::= int_constant | ident
AUX15 ::= & | , AUX15'1
AUX15'1 ::= & | ident AUX15
AUX16 ::= SIGNAL AUX10 AUX16'1 | null AUX16'1 | string_constant AUX16'1 | ( AUX11 ) AUX16'1 | int_constant AUX16'1 | float_constant AUX16'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX16'1 | ident AUX16'2
AUX16'1 ::= & | OPERATION UNARYEXPR TERM'1 AUX16'3 | SIGNAL TERM AUX22 AUX16'4 | , RETURNSTAT
AUX16'2 ::= & | [ AUX25 AUX16'1 | OPERATION UNARYEXPR TERM'1 AUX16'3 | SIGNAL TERM AUX22 AUX16'4 | , RETURNSTAT
AUX16'3 ::= & | SIGNAL TERM AUX22 AUX16'4 | , RETURNSTAT
AUX16'4 ::= & | , RETURNSTAT
AUX17 ::= & | elif ( EXPRESSION ) { AUX1 } AUX17
AUX20 ::= & | [ AUX11 ] AUX20
AUX22 ::= & | SIGNAL TERM AUX22
AUX25 ::= ] AUX10'1 | AUX11 ] AUX10'1
AUX26 ::= & | , AUX26'1
AUX26'1 ::= & | TYPE ident AUX10'1 AUX26
AUX3 ::= SIGNAL AUX10 AUX3'1 | null AUX3'1 | string_constant AUX3'1 | ( AUX11 ) AUX3'1 | int_constant AUX3'1 | float_constant AUX3'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX3'1 | new TYPE [ AUX11 ] AUX20 | ident AUX3'2
AUX3'1 ::= & | COMPARE AUX11 | OPERATION UNARYEXPR TERM'1 AUX3'3 | SIGNAL TERM AUX22 AUX3'4
AUX3'2 ::= & | COMPARE AUX11 | [ AUX25 AUX3'1 | ( FUNCCALL | OPERATION UNARYEXPR TERM'1 AUX3'3 | SIGNAL TERM AUX22 AUX3'4
AUX3'3 ::= & | COMPARE AUX11 | SIGNAL TERM AUX22 AUX3'4
AUX3'4 ::= & | COMPARE AUX11
COMPARE ::= <= | == | >= | > | != | <
EXPRESSION ::= SIGNAL AUX10 AUX3'1 | null AUX3'1 | string_constant AUX3'1 | ( AUX11 ) AUX3'1 | int_constant AUX3'1 | float_constant AUX3'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX3'1 | ident EXPRESSION'1
EXPRESSION'1 ::= & | COMPARE AUX11 | [ AUX25 AUX3'1 | OPERATION UNARYEXPR TERM'1 AUX3'3 | SIGNAL TERM AUX22 AUX3'4
FUNCCALL ::= ) | ident AUX15 )
OPERATION ::= % | / | *
RETURNSTAT ::= & | AUX16
SIGNAL ::= + | -
STATELIST ::= return STATELIST'1 | print EXPRESSION ; STATELIST'2 | ; STATELIST'2 | { STATELIST } STATELIST'2 | break ; STATELIST'2 | read ident AUX10'1 ; STATELIST'2 | for ( ident AUX10'1 = AUX3 ; EXPRESSION ; ident AUX10'1 = AUX3 ) AUX1 STATELIST'2 | ident STATELIST'3 | TYPE ident VARDECL ; STATELIST'2 | if ( EXPRESSION ) { AUX1 } STATELIST'4
STATELIST'1 ::= ; STATELIST'2 | AUX16 ; STATELIST'2
STATELIST'2 ::= & | STATELIST
STATELIST'3 ::= AUX10'1 = AUX3 ; STATELIST'2 | ( STATELIST'5
STATELIST'4 ::= & | STATELIST | else { AUX1 } STATELIST'2 | elif ( EXPRESSION ) { AUX1 } AUX17 STATELIST'6
STATELIST'5 ::= ) ; STATELIST'2 | ident AUX15 ) ; STATELIST'2
STATELIST'6 ::= & | STATELIST | else { AUX1 } STATELIST'2
TERM ::= SIGNAL AUX10 TERM'1 | null TERM'1 | string_constant TERM'1 | ( AUX11 ) TERM'1 | int_constant TERM'1 | float_constant TERM'1 | [ = EXPRESSION ARRAYCONTENTS ] TERM'1 | ident TERM'2
TERM'1 ::= & | OPERATION UNARYEXPR TERM'1
TERM'2 ::= & | OPERATION UNARYEXPR TERM'1 | [ AUX25 TERM'1
TYPE ::= float | int | string
UNARYEXPR ::= null | string_constant | int_constant | float_constant | ( AUX11 ) | SIGNAL AUX10 | ident AUX10'1 | [ = EXPRESSION ARRAYCONTENTS ]
VARDECL ::= & | [ AUX13 ] VARDECL

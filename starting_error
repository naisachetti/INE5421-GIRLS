A ::= & | { STATELIST } | ; | break ; | print EXPRESSION ; | if ( EXPRESSION ) { AUX1 } A'1 | def ident ( A'2 | read ident AUX12'1 ; | for ( ident AUX12'1 = AUX3 ; EXPRESSION ; ident AUX12'1 = AUX3 ) AUX1 | ident A'5 | ( ident LEFTMULTIATRIBSTAT ) = AUX4 ; | return RETURNSTAT ; | TYPE ident VARDECL ;
A'1 ::= & | else { AUX1 } | elif ( EXPRESSION ) { AUX1 } AUX19 A'3
A'2 ::= ) { STATELIST } A'4 | TYPE ident AUX12'1 AUX28 ) { STATELIST } A'4
A'3 ::= & | else { AUX1 }
A'4 ::= & | def ident ( A'2
A'5 ::= AUX12'1 = AUX3 ; | ( FUNCCALL ;
ARRAYCONTENTS ::= & | , = EXPRESSION ARRAYCONTENTS
AUX1 ::= { STATELIST } | ; | break ; | print EXPRESSION ; | return AUX1'3 | read ident AUX12'1 ; | for ( ident AUX12'1 = AUX3 ; EXPRESSION ; ident AUX12'1 = AUX3 ) AUX1 | if ( EXPRESSION ) { AUX1 } A'1 | ident AUX1'1 | ( ident LEFTMULTIATRIBSTAT ) = AUX4 ; | TYPE ident VARDECL ;
AUX1'1 ::= ( AUX1'2 | AUX12'1 = AUX3 ;
AUX1'2 ::= ) ; | AUX30 ) ;
AUX1'3 ::= ; | AUX18 ;
AUX12 ::= string_constant | null | int_constant | float_constant | ( AUX21 ) | ident AUX12'1 | [ = EXPRESSION ARRAYCONTENTS ]
AUX12'1 ::= & | [ AUX32
AUX14 ::= ident | int_constant
AUX18 ::= string_constant AUX18'1 | SIGNAL AUX12 AUX18'1 | null AUX18'1 | int_constant AUX18'1 | ( AUX21 ) AUX18'1 | float_constant AUX18'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX18'1 | ident AUX18'2
AUX18'1 ::= & | OPERATION UNARYEXPR TERM'1 AUX18'4 | , RETURNSTAT | SIGNAL TERM AUX25 AUX18'3
AUX18'2 ::= & | OPERATION UNARYEXPR TERM'1 AUX18'4 | [ AUX32 AUX18'1 | , RETURNSTAT | SIGNAL TERM AUX25 AUX18'3
AUX18'3 ::= & | , RETURNSTAT
AUX18'4 ::= & | , RETURNSTAT | SIGNAL TERM AUX25 AUX18'3
AUX19 ::= & | elif ( EXPRESSION ) { AUX1 } AUX19
AUX21 ::= string_constant AUX21'1 | SIGNAL AUX12 AUX21'1 | null AUX21'1 | int_constant AUX21'1 | ( AUX21 ) AUX21'1 | float_constant AUX21'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX21'1 | ident AUX21'2
AUX21'1 ::= & | SIGNAL TERM AUX25 | OPERATION UNARYEXPR TERM'1 AUX25
AUX21'2 ::= & | [ AUX32 AUX21'1 | SIGNAL TERM AUX25 | OPERATION UNARYEXPR TERM'1 AUX25
AUX23 ::= & | [ AUX21 ] AUX23
AUX25 ::= & | SIGNAL TERM AUX25
AUX28 ::= & | , AUX28'1
AUX28'1 ::= & | TYPE ident AUX12'1 AUX28
AUX3 ::= string_constant AUX3'1 | SIGNAL AUX12 AUX3'1 | null AUX3'1 | int_constant AUX3'1 | ( AUX21 ) AUX3'1 | float_constant AUX3'1 | ident AUX3'2 | [ = EXPRESSION ARRAYCONTENTS ] AUX3'1 | new TYPE [ AUX21 ] AUX23
AUX3'1 ::= & | COMPARE AUX21 | OPERATION UNARYEXPR TERM'1 AUX3'4 | SIGNAL TERM AUX25 AUX3'3
AUX3'2 ::= & | COMPARE AUX21 | OPERATION UNARYEXPR TERM'1 AUX3'4 | [ AUX32 AUX3'1 | ( FUNCCALL | SIGNAL TERM AUX25 AUX3'3
AUX3'3 ::= & | COMPARE AUX21
AUX3'4 ::= & | COMPARE AUX21 | SIGNAL TERM AUX25 AUX3'3
AUX30 ::= string_constant AUX30'1 | SIGNAL AUX12 AUX30'1 | null AUX30'1 | int_constant AUX30'1 | ( AUX21 ) AUX30'1 | float_constant AUX30'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX30'1 | ident AUX30'2
AUX30'1 ::= & | , AUX30'3 | OPERATION UNARYEXPR TERM'1 AUX30'5 | SIGNAL TERM AUX25 AUX30'4
AUX30'2 ::= & | , AUX30'3 | OPERATION UNARYEXPR TERM'1 AUX30'5 | [ AUX32 AUX30'1 | SIGNAL TERM AUX25 AUX30'4
AUX30'3 ::= & | AUX30
AUX30'4 ::= & | , AUX30'3
AUX30'5 ::= & | , AUX30'3 | SIGNAL TERM AUX25 AUX30'4
AUX32 ::= ] AUX12'1 | AUX21 ] AUX12'1
AUX4 ::= ( RIGHTMULTIATRIBSTAT ) | ident ( FUNCCALL
COMPARE ::= >= | > | < | <= | != | ==
EXPRESSION ::= string_constant AUX3'1 | SIGNAL AUX12 AUX3'1 | null AUX3'1 | int_constant AUX3'1 | ( AUX21 ) AUX3'1 | float_constant AUX3'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX3'1 | ident EXPRESSION'1
EXPRESSION'1 ::= & | COMPARE AUX21 | OPERATION UNARYEXPR TERM'1 AUX3'4 | [ AUX32 AUX3'1 | SIGNAL TERM AUX25 AUX3'3
FUNCCALL ::= ) | AUX30 )
LEFTMULTIATRIBSTAT ::= & | , ident LEFTMULTIATRIBSTAT | [ AUX32 LEFTMULTIATRIBSTAT'1
LEFTMULTIATRIBSTAT'1 ::= & | , ident LEFTMULTIATRIBSTAT
OPERATION ::= / | * | %
RETURNSTAT ::= & | AUX18
RIGHTMULTIATRIBSTAT ::= string_constant RIGHTMULTIATRIBSTAT'1 | SIGNAL AUX12 RIGHTMULTIATRIBSTAT'1 | null RIGHTMULTIATRIBSTAT'1 | int_constant RIGHTMULTIATRIBSTAT'1 | ( AUX21 ) RIGHTMULTIATRIBSTAT'1 | float_constant RIGHTMULTIATRIBSTAT'1 | ident RIGHTMULTIATRIBSTAT'2 | [ = EXPRESSION ARRAYCONTENTS ] RIGHTMULTIATRIBSTAT'1 | new TYPE [ AUX21 ] AUX23 RIGHTMULTIATRIBSTAT'3
RIGHTMULTIATRIBSTAT'1 ::= & | , RIGHTMULTIATRIBSTAT | COMPARE AUX21 RIGHTMULTIATRIBSTAT'3 | OPERATION UNARYEXPR TERM'1 RIGHTMULTIATRIBSTAT'4 | SIGNAL TERM AUX25 RIGHTMULTIATRIBSTAT'5
RIGHTMULTIATRIBSTAT'2 ::= & | , RIGHTMULTIATRIBSTAT | COMPARE AUX21 RIGHTMULTIATRIBSTAT'3 | OPERATION UNARYEXPR TERM'1 RIGHTMULTIATRIBSTAT'4 | ( RIGHTMULTIATRIBSTAT'6 | [ AUX32 RIGHTMULTIATRIBSTAT'1 | SIGNAL TERM AUX25 RIGHTMULTIATRIBSTAT'5
RIGHTMULTIATRIBSTAT'3 ::= & | , RIGHTMULTIATRIBSTAT
RIGHTMULTIATRIBSTAT'4 ::= & | , RIGHTMULTIATRIBSTAT | COMPARE AUX21 RIGHTMULTIATRIBSTAT'3 | SIGNAL TERM AUX25 RIGHTMULTIATRIBSTAT'5
RIGHTMULTIATRIBSTAT'5 ::= & | , RIGHTMULTIATRIBSTAT | COMPARE AUX21 RIGHTMULTIATRIBSTAT'3
RIGHTMULTIATRIBSTAT'6 ::= ) RIGHTMULTIATRIBSTAT'3 | AUX30 ) RIGHTMULTIATRIBSTAT'3
SIGNAL ::= + | -
STATELIST ::= if ( EXPRESSION ) { AUX1 } STATELIST'3 | read ident AUX12'1 ; STATELIST'1 | break ; STATELIST'1 | print EXPRESSION ; STATELIST'1 | for ( ident AUX12'1 = AUX3 ; EXPRESSION ; ident AUX12'1 = AUX3 ) AUX1 STATELIST'1 | ; STATELIST'1 | { STATELIST } STATELIST'1 | ident STATELIST'2 | return STATELIST'5 | ( ident LEFTMULTIATRIBSTAT ) = AUX4 ; STATELIST'1 | TYPE ident VARDECL ; STATELIST'1
STATELIST'1 ::= & | STATELIST
STATELIST'2 ::= AUX12'1 = AUX3 ; STATELIST'1 | ( STATELIST'4
STATELIST'3 ::= & | STATELIST | else { AUX1 } STATELIST'1 | elif ( EXPRESSION ) { AUX1 } AUX19 STATELIST'6
STATELIST'4 ::= ) ; STATELIST'1 | AUX30 ) ; STATELIST'1
STATELIST'5 ::= ; STATELIST'1 | AUX18 ; STATELIST'1
STATELIST'6 ::= & | STATELIST | else { AUX1 } STATELIST'1
TERM ::= string_constant TERM'1 | SIGNAL AUX12 TERM'1 | null TERM'1 | int_constant TERM'1 | ( AUX21 ) TERM'1 | float_constant TERM'1 | ident TERM'2 | [ = EXPRESSION ARRAYCONTENTS ] TERM'1
TERM'1 ::= & | OPERATION UNARYEXPR TERM'1
TERM'2 ::= & | OPERATION UNARYEXPR TERM'1 | [ AUX32 TERM'1
TYPE ::= float | string | int
UNARYEXPR ::= string_constant | null | int_constant | float_constant | ( AUX21 ) | SIGNAL AUX12 | ident AUX12'1 | [ = EXPRESSION ARRAYCONTENTS ]
VARDECL ::= & | [ AUX14 ] VARDECL

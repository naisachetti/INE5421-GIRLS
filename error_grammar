A ::= & | { STATELIST } | ; | break ; | print EXPRESSION ; | read ident AUX10'1 ; | for ( ident AUX10'1 = AUX3 ; EXPRESSION ; ident AUX10'1 = AUX3 ) AUX1 | ident A'1 | def ident ( A'2 | if ( EXPRESSION ) AUX1 A'3 | TYPE ident VARDECL ; | return RETURNSTAT ;
A'1 ::= AUX10'1 = AUX3 ; | ( FUNCCALL ;
A'2 ::= ) { STATELIST } A'4 | TYPE ident AUX10'1 AUX25 ) { STATELIST } A'4
A'3 ::= else AUX1 | &
A'4 ::= & | def ident ( A'2
ARRAYCONTENTS ::= & | , = EXPRESSION ARRAYCONTENTS
AUX1 ::= { STATELIST } | ; | break ; | print EXPRESSION ; | read ident AUX10'1 ; | for ( ident AUX10'1 = AUX3 ; EXPRESSION ; ident AUX10'1 = AUX3 ) AUX1 | ident AUX1'1 | if ( EXPRESSION ) AUX1 A'3 | return AUX1'2 | TYPE ident VARDECL ;
AUX1'1 ::= AUX10'1 = AUX3 ; | ( AUX1'3
AUX1'2 ::= ; | AUX14 ;
AUX1'3 ::= ) ; | ident AUX13 ) ;
AUX10 ::= float_constant | string_constant | null | int_constant | ( NUMEXPRESSION ) | ident AUX10'1 | [ = EXPRESSION ARRAYCONTENTS ]
AUX10'1 ::= & | [ AUX17
AUX13 ::= & | , AUX13'1
AUX13'1 ::= & | ident AUX13
AUX14 ::= float_constant AUX14'1 | string_constant AUX14'2 | null AUX14'2 | int_constant AUX14'2 | SIGNAL AUX10 AUX14'2 | ( NUMEXPRESSION ) AUX14'2 | ident AUX14'3 | [ = EXPRESSION ARRAYCONTENTS ] AUX14'2
AUX14'1 ::= & | OPERATION UNARYEXPR TERM'1 AUX14'4 | SIGNAL TERM NUMEXPRESSION'3 AUX14'5 | , RETURNSTAT
AUX14'2 ::= & | OPERATION UNARYEXPR TERM'1 AUX14'4 | SIGNAL TERM NUMEXPRESSION'3 AUX14'5 | , RETURNSTAT
AUX14'3 ::= & | OPERATION UNARYEXPR TERM'1 AUX14'4 | SIGNAL TERM NUMEXPRESSION'3 AUX14'5 | [ AUX17 AUX14'2 | , RETURNSTAT
AUX14'4 ::= & | SIGNAL TERM NUMEXPRESSION'3 AUX14'5 | , RETURNSTAT
AUX14'5 ::= & | , RETURNSTAT
AUX17 ::= ] AUX10'1 | NUMEXPRESSION ] AUX10'1
AUX20 ::= & | [ NUMEXPRESSION ] AUX20
AUX25 ::= & | , AUX25'1
AUX25'1 ::= & | TYPE ident AUX10'1 AUX25
AUX3 ::= float_constant AUX3'1 | string_constant AUX3'2 | null AUX3'2 | int_constant AUX3'2 | SIGNAL AUX10 AUX3'2 | ( NUMEXPRESSION ) AUX3'2 | [ = EXPRESSION ARRAYCONTENTS ] AUX3'2 | ident AUX3'3 | new TYPE [ NUMEXPRESSION ] AUX20
AUX3'1 ::= COMPARE NUMEXPRESSION | & | OPERATION UNARYEXPR TERM'1 AUX3'4 | SIGNAL TERM NUMEXPRESSION'3 AUX3'5
AUX3'2 ::= COMPARE NUMEXPRESSION | & | OPERATION UNARYEXPR TERM'1 AUX3'4 | SIGNAL TERM NUMEXPRESSION'3 AUX3'5
AUX3'3 ::= COMPARE NUMEXPRESSION | & | ( FUNCCALL | [ AUX17 AUX3'2 | OPERATION UNARYEXPR TERM'1 AUX3'4 | SIGNAL TERM NUMEXPRESSION'3 AUX3'5
AUX3'4 ::= COMPARE NUMEXPRESSION | & | SIGNAL TERM NUMEXPRESSION'3 AUX3'5
AUX3'5 ::= COMPARE NUMEXPRESSION | &
COMPARE ::= == | > | != | >= | <= | <
EXPRESSION ::= float_constant AUX3'2 | string_constant AUX3'2 | null AUX3'2 | int_constant AUX3'2 | SIGNAL AUX10 AUX3'2 | ( NUMEXPRESSION ) AUX3'2 | ident EXPRESSION'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX3'2
EXPRESSION'1 ::= COMPARE NUMEXPRESSION | & | [ AUX17 AUX3'2 | OPERATION UNARYEXPR TERM'1 AUX3'4 | SIGNAL TERM NUMEXPRESSION'3 AUX3'5
FUNCCALL ::= ) | ident AUX13 )
NUMEXPRESSION ::= float_constant NUMEXPRESSION'1 | string_constant NUMEXPRESSION'1 | null NUMEXPRESSION'1 | int_constant NUMEXPRESSION'1 | ident NUMEXPRESSION'2 | SIGNAL AUX10 NUMEXPRESSION'4 | ( NUMEXPRESSION ) NUMEXPRESSION'4 | [ = EXPRESSION ARRAYCONTENTS ] NUMEXPRESSION'4
NUMEXPRESSION'1 ::= & | OPERATION UNARYEXPR TERM'1 NUMEXPRESSION'3 | SIGNAL TERM NUMEXPRESSION'3
NUMEXPRESSION'2 ::= & | OPERATION UNARYEXPR TERM'1 NUMEXPRESSION'3 | SIGNAL TERM NUMEXPRESSION'3 | [ AUX17 NUMEXPRESSION'4
NUMEXPRESSION'3 ::= & | SIGNAL TERM NUMEXPRESSION'3
NUMEXPRESSION'4 ::= & | SIGNAL TERM NUMEXPRESSION'3 | OPERATION UNARYEXPR TERM'1 NUMEXPRESSION'3
OPERATION ::= / | * | %
RETURNSTAT ::= AUX14 | &
SIGNAL ::= + | -
STATELIST ::= ; STATELIST'2 | break ; STATELIST'2 | { STATELIST } STATELIST'2 | print EXPRESSION ; STATELIST'2 | read ident AUX10'1 ; STATELIST'2 | for ( ident AUX10'1 = AUX3 ; EXPRESSION ; ident AUX10'1 = AUX3 ) AUX1 STATELIST'2 | ident STATELIST'1 | return STATELIST'3 | if ( EXPRESSION ) AUX1 STATELIST'5 | TYPE ident VARDECL ; STATELIST'2
STATELIST'1 ::= AUX10'1 = AUX3 ; STATELIST'2 | ( STATELIST'4
STATELIST'2 ::= STATELIST | &
STATELIST'3 ::= ; STATELIST'2 | AUX14 ; STATELIST'2
STATELIST'4 ::= ) ; STATELIST'2 | ident AUX13 ) ; STATELIST'2
STATELIST'5 ::= STATELIST | & | else AUX1 STATELIST'2
TERM ::= float_constant TERM'1 | string_constant TERM'1 | null TERM'1 | int_constant TERM'1 | SIGNAL AUX10 TERM'1 | ( NUMEXPRESSION ) TERM'1 | [ = EXPRESSION ARRAYCONTENTS ] TERM'1 | ident TERM'2
TERM'1 ::= & | OPERATION UNARYEXPR TERM'1
TERM'2 ::= & | OPERATION UNARYEXPR TERM'1 | [ AUX17 TERM'1
TYPE ::= string | int | float
UNARYEXPR ::= float_constant | string_constant | null | int_constant | ( NUMEXPRESSION ) | SIGNAL AUX10 | ident AUX10'1 | [ = EXPRESSION ARRAYCONTENTS ]
VARDECL ::= & | [ int_constant ] VARDECL

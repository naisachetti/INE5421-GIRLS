A ::= & | ATRIBSTAT ; | ; | VARDECL ; | break ; | { STATELIST } | print EXPRESSION ; | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) AUX1 | read ident AUX10'1 ; | return RETURNSTAT ; | ident ( FUNCCALL ; | if ( A'1 | def ident ( A'2
AUX1 ::= ATRIBSTAT ; | ; | VARDECL ; | break ; | { STATELIST } | print EXPRESSION ; | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) AUX1 | read ident AUX10'1 ; | return AUX1'1 | ident ( AUX1'2 | if ( A'1
ATRIBSTAT ::= ident AUX10'1 = AUX3
AUX3 ::= ident AUX3'1 | int_constant AUX3'2 | float_constant AUX3'2 | null AUX3'2 | string_constant AUX3'2 | new TYPE [ AUX20 | ( AUX3'3 | [ AUX3'4 | SIGNAL AUX3'5
AUX10 ::= int_constant | float_constant | null | string_constant | ( NUMEXPRESSION ) | ident AUX10'1 | [ = ARRAYCONTENTS ]
AUX14 ::= int_constant AUX14'1 | float_constant AUX14'2 | null AUX14'2 | string_constant AUX14'2 | ( AUX14'3 | ident AUX14'4 | [ AUX14'5 | SIGNAL AUX14'6
STATELIST ::= ; STATELIST'1 | VARDECL ; STATELIST'1 | break ; STATELIST'1 | ident STATELIST'2 | { STATELIST'3 | print STATELIST'4 | read STATELIST'5 | return STATELIST'6 | for ( STATELIST'7 | if ( STATELIST'8
VARDECL ::= TYPE ident VARDECL'1
EXPRESSION ::= int_constant AUX3'2 | float_constant AUX3'2 | null AUX3'2 | string_constant AUX3'2 | ident EXPRESSION'1 | ( AUX3'3 | [ AUX3'4 | SIGNAL AUX3'5
AUX21 ::= COMPARE NUMEXPRESSION
NUMEXPRESSION ::= int_constant NUMEXPRESSION'1 | float_constant NUMEXPRESSION'1 | null NUMEXPRESSION'1 | string_constant NUMEXPRESSION'1 | ( NUMEXPRESSION'2 | ident NUMEXPRESSION'3 | [ NUMEXPRESSION'4 | SIGNAL NUMEXPRESSION'5
AUX22 ::= SIGNAL AUX22'1
TERM ::= int_constant TERM'1 | float_constant TERM'1 | null TERM'1 | string_constant TERM'1 | ( TERM'2 | ident TERM'3 | [ TERM'4 | SIGNAL TERM'5
AUX23 ::= OPERATION AUX23'1
UNARYEXPR ::= int_constant | float_constant | null | string_constant | ( NUMEXPRESSION ) | SIGNAL AUX10 | ident AUX10'1 | [ = ARRAYCONTENTS ]
AUX25 ::= TYPE AUX25'1
TYPE ::= float | string | int
COMPARE ::= == | < | != | > | <= | >=
SIGNAL ::= - | +
OPERATION ::= / | * | %
AUX3'1 ::= AUX21 | & | [ AUX17 AUX3'2 | ( FUNCCALL | AUX23 AUX3'6 | AUX22 AUX3'7
AUX3'2 ::= AUX21 | & | AUX23 AUX3'6 | AUX22 AUX3'7
AUX10'1 ::= & | [ AUX17
AUX14'1 ::= & | , RETURNSTAT | AUX23 AUX14'7 | AUX22 AUX14'8
AUX14'2 ::= & | , RETURNSTAT | AUX23 AUX14'7 | AUX22 AUX14'8
STATELIST'1 ::= STATELIST | &
NUMEXPRESSION'1 ::= AUX22 | & | AUX23 NUMEXPRESSION'6
AUX22'1 ::= TERM NUMEXPRESSION'6
TERM'1 ::= AUX23 | &
AUX23'1 ::= UNARYEXPR TERM'1
AUX25'1 ::= ident AUX10'1 AUX25'2
AUX25'2 ::= & | , AUX25'3
AUX25'3 ::= AUX25 | &
STATELIST'2 ::= ( STATELIST'9 | AUX10'1 = STATELIST'10
EXPRESSION'1 ::= AUX21 | & | [ AUX17 AUX3'2 | AUX23 AUX3'6 | AUX22 AUX3'7
RETURNSTAT ::= AUX14 | &
AUX17 ::= NUMEXPRESSION ] AUX10'1
AUX1'1 ::= ; | AUX14 ;
AUX1'2 ::= ) ; | ident AUX13 ) ;
AUX14'3 ::= NUMEXPRESSION ) AUX14'2
AUX14'4 ::= & | , RETURNSTAT | [ AUX17 AUX14'2 | AUX23 AUX14'7 | AUX22 AUX14'8
AUX14'5 ::= = ARRAYCONTENTS ] AUX14'2
AUX14'6 ::= AUX10 AUX14'2
AUX14'7 ::= & | , RETURNSTAT | AUX22 AUX14'8
AUX14'8 ::= & | , RETURNSTAT
AUX20 ::= NUMEXPRESSION ] AUX20'1
AUX20'1 ::= & | [ AUX20
NUMEXPRESSION'2 ::= NUMEXPRESSION ) NUMEXPRESSION'1
NUMEXPRESSION'3 ::= AUX22 | & | [ AUX17 NUMEXPRESSION'1 | AUX23 NUMEXPRESSION'6
NUMEXPRESSION'4 ::= = ARRAYCONTENTS ] NUMEXPRESSION'1
NUMEXPRESSION'5 ::= AUX10 NUMEXPRESSION'1
NUMEXPRESSION'6 ::= AUX22 | &
FUNCCALL ::= ) | ident AUX13 )
A'1 ::= EXPRESSION ) A'3
A'2 ::= ) { A'5 | AUX25 ) { A'5
A'3 ::= AUX1 A'4
A'4 ::= else AUX1 | &
A'5 ::= STATELIST } A'6
A'6 ::= & | def ident ( A'2
STATELIST'3 ::= STATELIST } STATELIST'1
STATELIST'4 ::= EXPRESSION ; STATELIST'1
STATELIST'5 ::= ident AUX10'1 ; STATELIST'1
STATELIST'6 ::= ; STATELIST'1 | AUX14 ; STATELIST'1
STATELIST'7 ::= ATRIBSTAT ; STATELIST'11
STATELIST'8 ::= EXPRESSION ) STATELIST'12
STATELIST'9 ::= ) ; STATELIST'1 | ident AUX13 ) ; STATELIST'1
STATELIST'10 ::= AUX3 ; STATELIST'1
STATELIST'11 ::= EXPRESSION ; STATELIST'14
STATELIST'12 ::= AUX1 STATELIST'13
STATELIST'13 ::= STATELIST | & | else STATELIST'15
STATELIST'14 ::= ATRIBSTAT ) STATELIST'15
STATELIST'15 ::= AUX1 STATELIST'1
ARRAYCONTENTS ::= EXPRESSION ARRAYCONTENTS'1
ARRAYCONTENTS'1 ::= & | , = ARRAYCONTENTS
TERM'2 ::= NUMEXPRESSION ) TERM'1
TERM'3 ::= AUX23 | & | [ AUX17 TERM'1
TERM'4 ::= = ARRAYCONTENTS ] TERM'1
TERM'5 ::= AUX10 TERM'1
VARDECL'1 ::= & | [ int_constant ] VARDECL'1
AUX3'3 ::= NUMEXPRESSION ) AUX3'2
AUX3'4 ::= = ARRAYCONTENTS ] AUX3'2
AUX3'5 ::= AUX10 AUX3'2
AUX3'6 ::= AUX21 | & | AUX22 AUX3'7
AUX3'7 ::= AUX21 | &
AUX13 ::= & | , AUX13'1
AUX13'1 ::= & | ident AUX13

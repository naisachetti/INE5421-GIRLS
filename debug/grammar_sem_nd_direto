A ::= & | { AUX22 } | break ; | ; | print EXPRESSION ; | if ( EXPRESSION ) { AUX19 } A'1 | def ident ( A'2 | read ident AUX12'1 ; | for ( ident AUX12'1 = AUX3 ; EXPRESSION ; ident AUX12'1 = AUX3 ) AUX1 | ident A'5 | TYPE ident VARDECL ; | return RETURNSTAT ; | ( ident LEFTMULTIATRIBSTAT ) = AUX4 ;
A'1 ::= & | else { AUX1 } | elif ( EXPRESSION ) { AUX31 } AUX33 A'3
A'2 ::= ) AUX1 A'4 | TYPE ident AUX12'1 AUX28 ) AUX1 A'4
A'3 ::= & | else { AUX1 }
A'4 ::= & | def ident ( A'2
A'5 ::= AUX12'1 = AUX3 ; | ( FUNCCALL ;
ARRAYCONTENTS ::= & | , = EXPRESSION ARRAYCONTENTS
AUX1 ::= { AUX22 } | break ; | ; | print EXPRESSION ; | return AUX1'2 | read ident AUX12'1 ; | for ( ident AUX12'1 = AUX3 ; EXPRESSION ; ident AUX12'1 = AUX3 ) AUX1 | if ( EXPRESSION ) { AUX19 } A'1 | ident AUX1'1 | TYPE ident VARDECL ; | ( ident LEFTMULTIATRIBSTAT ) = AUX4 ;
AUX1'1 ::= ( AUX1'3 | AUX12'1 = AUX3 ;
AUX1'2 ::= ; | AUX18 ;
AUX1'3 ::= ) ; | AUX30 ) ;
AUX12 ::= float_constant | string_constant | null | int_constant | ( AUX20 ) | ident AUX12'1 | [ = EXPRESSION ARRAYCONTENTS ]
AUX12'1 ::= & | [ AUX32
AUX14 ::= ident | int_constant
AUX18 ::= ( AUX20 ) AUX18'1 | SIGNAL AUX12 AUX18'1 | float_constant AUX18'1 | string_constant AUX18'1 | null AUX18'1 | int_constant AUX18'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX18'1 | ident AUX18'2
AUX18'1 ::= & | , RETURNSTAT | SIGNAL TERM AUX25 AUX18'3 | OPERATION UNARYEXPR TERM'1 AUX18'4
AUX18'2 ::= & | , RETURNSTAT | SIGNAL TERM AUX25 AUX18'3 | OPERATION UNARYEXPR TERM'1 AUX18'4 | [ AUX32 AUX18'1
AUX18'3 ::= & | , RETURNSTAT
AUX18'4 ::= & | , RETURNSTAT | SIGNAL TERM AUX25 AUX18'3
AUX19 ::= if ( EXPRESSION ) { AUX19 } AUX19'3 | for ( ident AUX12'1 = AUX3 ; EXPRESSION ; ident AUX12'1 = AUX3 ) AUX1 AUX19'1 | { AUX22 } AUX19'1 | ; AUX19'1 | print EXPRESSION ; AUX19'1 | break ; AUX19'1 | read ident AUX12'1 ; AUX19'1 | ident AUX19'2 | return AUX19'4 | TYPE ident VARDECL ; AUX19'1 | ( ident LEFTMULTIATRIBSTAT ) = AUX4 ; AUX19'1
AUX19'1 ::= & | AUX19
AUX19'2 ::= AUX12'1 = AUX3 ; AUX19'1 | ( AUX19'5
AUX19'3 ::= & | AUX19 | else { AUX1 } AUX19'1 | elif ( EXPRESSION ) { AUX31 } AUX33 AUX19'6
AUX19'4 ::= AUX18 ; AUX19'1 | ; AUX19'1
AUX19'5 ::= AUX30 ) ; AUX19'1 | ) ; AUX19'1
AUX19'6 ::= & | AUX19 | else { AUX1 } AUX19'1
AUX20 ::= ( AUX20 ) AUX20'1 | SIGNAL AUX12 AUX20'1 | float_constant AUX20'1 | string_constant AUX20'1 | null AUX20'1 | int_constant AUX20'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX20'1 | ident AUX20'2
AUX20'1 ::= & | SIGNAL TERM AUX25 | OPERATION UNARYEXPR TERM'1 AUX25
AUX20'2 ::= & | SIGNAL TERM AUX25 | OPERATION UNARYEXPR TERM'1 AUX25 | [ AUX32 AUX20'1
AUX22 ::= if ( EXPRESSION ) { AUX19 } AUX22'3 | for ( ident AUX12'1 = AUX3 ; EXPRESSION ; ident AUX12'1 = AUX3 ) AUX1 AUX22'1 | { AUX22 } AUX22'1 | ; AUX22'1 | print EXPRESSION ; AUX22'1 | break ; AUX22'1 | read ident AUX12'1 ; AUX22'1 | ident AUX22'2 | TYPE ident VARDECL ; AUX22'1 | ( ident LEFTMULTIATRIBSTAT ) = AUX4 ; AUX22'1 | return AUX22'4
AUX22'1 ::= & | AUX22
AUX22'2 ::= AUX12'1 = AUX3 ; AUX22'1 | ( AUX22'5
AUX22'3 ::= & | AUX22 | else { AUX1 } AUX22'1 | elif ( EXPRESSION ) { AUX31 } AUX33 AUX22'6
AUX22'4 ::= AUX18 ; AUX22'1 | ; AUX22'1
AUX22'5 ::= AUX30 ) ; AUX22'1 | ) ; AUX22'1
AUX22'6 ::= & | AUX22 | else { AUX1 } AUX22'1
AUX23 ::= & | [ AUX20 ] AUX23
AUX25 ::= & | SIGNAL TERM AUX25
AUX28 ::= & | , AUX28'1
AUX28'1 ::= & | TYPE ident AUX12'1 AUX28
AUX3 ::= ( AUX20 ) AUX3'1 | SIGNAL AUX12 AUX3'1 | float_constant AUX3'1 | string_constant AUX3'1 | null AUX3'1 | int_constant AUX3'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX3'1 | new TYPE [ AUX20 ] AUX23 | ident AUX3'2
AUX3'1 ::= & | COMPARE AUX20 | SIGNAL TERM AUX25 AUX3'3 | OPERATION UNARYEXPR TERM'1 AUX3'4
AUX3'2 ::= & | COMPARE AUX20 | ( FUNCCALL | [ AUX32 AUX3'1 | SIGNAL TERM AUX25 AUX3'3 | OPERATION UNARYEXPR TERM'1 AUX3'4
AUX3'3 ::= & | COMPARE AUX20
AUX3'4 ::= & | COMPARE AUX20 | SIGNAL TERM AUX25 AUX3'3
AUX30 ::= ( AUX20 ) AUX30'1 | SIGNAL AUX12 AUX30'1 | float_constant AUX30'1 | string_constant AUX30'1 | null AUX30'1 | int_constant AUX30'1 | ident AUX30'2 | [ = EXPRESSION ARRAYCONTENTS ] AUX30'1
AUX30'1 ::= & | OPERATION UNARYEXPR TERM'1 AUX30'4 | , AUX30'5 | SIGNAL TERM AUX25 AUX30'3
AUX30'2 ::= & | OPERATION UNARYEXPR TERM'1 AUX30'4 | , AUX30'5 | SIGNAL TERM AUX25 AUX30'3 | [ AUX32 AUX30'1
AUX30'3 ::= & | , AUX30'5
AUX30'4 ::= & | , AUX30'5 | SIGNAL TERM AUX25 AUX30'3
AUX30'5 ::= & | AUX30
AUX31 ::= TYPE ident AUX31'2 | if ( EXPRESSION ) { AUX19 } AUX31'4 | for ( ident AUX12'1 = AUX3 ; EXPRESSION ; ident AUX12'1 = AUX3 ) AUX1 AUX31'1 | { AUX22 } AUX31'1 | ; AUX31'1 | print EXPRESSION ; AUX31'1 | break ; AUX31'1 | read ident AUX12'1 ; AUX31'1 | ident AUX31'3 | ( ident LEFTMULTIATRIBSTAT ) = AUX4 ; AUX31'1 | return AUX31'5
AUX31'1 ::= & | AUX31
AUX31'2 ::= ; AUX31'1 | [ AUX14 ] VARDECL ; AUX31'1
AUX31'3 ::= AUX12'1 = AUX3 ; AUX31'1 | ( AUX31'6
AUX31'4 ::= & | AUX31 | else { AUX1 } AUX31'1 | elif ( EXPRESSION ) { AUX31 } AUX33 AUX31'7
AUX31'5 ::= AUX18 ; AUX31'1 | ; AUX31'1
AUX31'6 ::= AUX30 ) ; AUX31'1 | ) ; AUX31'1
AUX31'7 ::= & | AUX31 | else { AUX1 } AUX31'1
AUX32 ::= ] AUX12'1 | AUX20 ] AUX12'1
AUX33 ::= & | elif ( EXPRESSION ) { AUX31 } AUX33
AUX4 ::= ( RIGHTMULTIATRIBSTAT ) | ident ( FUNCCALL
COMPARE ::= == | >= | <= | != | < | >
EXPRESSION ::= ( AUX20 ) AUX3'1 | SIGNAL AUX12 AUX3'1 | float_constant AUX3'1 | string_constant AUX3'1 | null AUX3'1 | int_constant AUX3'1 | ident EXPRESSION'1 | [ = EXPRESSION ARRAYCONTENTS ] AUX3'1
EXPRESSION'1 ::= & | COMPARE AUX20 | [ AUX32 AUX3'1 | SIGNAL TERM AUX25 AUX3'3 | OPERATION UNARYEXPR TERM'1 AUX3'4
FUNCCALL ::= ) | AUX30 )
LEFTMULTIATRIBSTAT ::= & | , ident LEFTMULTIATRIBSTAT | [ AUX32 LEFTMULTIATRIBSTAT'1
LEFTMULTIATRIBSTAT'1 ::= & | , ident LEFTMULTIATRIBSTAT
OPERATION ::= * | / | %
RETURNSTAT ::= & | AUX18
RIGHTMULTIATRIBSTAT ::= ( AUX20 ) RIGHTMULTIATRIBSTAT'2 | SIGNAL AUX12 RIGHTMULTIATRIBSTAT'2 | float_constant RIGHTMULTIATRIBSTAT'2 | string_constant RIGHTMULTIATRIBSTAT'2 | null RIGHTMULTIATRIBSTAT'2 | int_constant RIGHTMULTIATRIBSTAT'2 | ident RIGHTMULTIATRIBSTAT'3 | [ = EXPRESSION ARRAYCONTENTS ] RIGHTMULTIATRIBSTAT'2 | new TYPE [ AUX20 ] AUX23 RIGHTMULTIATRIBSTAT'1
RIGHTMULTIATRIBSTAT'1 ::= & | , RIGHTMULTIATRIBSTAT
RIGHTMULTIATRIBSTAT'2 ::= & | , RIGHTMULTIATRIBSTAT | COMPARE AUX20 RIGHTMULTIATRIBSTAT'1 | SIGNAL TERM AUX25 RIGHTMULTIATRIBSTAT'4 | OPERATION UNARYEXPR TERM'1 RIGHTMULTIATRIBSTAT'5
RIGHTMULTIATRIBSTAT'3 ::= & | , RIGHTMULTIATRIBSTAT | COMPARE AUX20 RIGHTMULTIATRIBSTAT'1 | SIGNAL TERM AUX25 RIGHTMULTIATRIBSTAT'4 | OPERATION UNARYEXPR TERM'1 RIGHTMULTIATRIBSTAT'5 | ( RIGHTMULTIATRIBSTAT'6 | [ AUX32 RIGHTMULTIATRIBSTAT'2
RIGHTMULTIATRIBSTAT'4 ::= & | , RIGHTMULTIATRIBSTAT | COMPARE AUX20 RIGHTMULTIATRIBSTAT'1
RIGHTMULTIATRIBSTAT'5 ::= & | , RIGHTMULTIATRIBSTAT | COMPARE AUX20 RIGHTMULTIATRIBSTAT'1 | SIGNAL TERM AUX25 RIGHTMULTIATRIBSTAT'4
RIGHTMULTIATRIBSTAT'6 ::= AUX30 ) RIGHTMULTIATRIBSTAT'1 | ) RIGHTMULTIATRIBSTAT'1
SIGNAL ::= - | +
TERM ::= ( AUX20 ) TERM'1 | SIGNAL AUX12 TERM'1 | float_constant TERM'1 | string_constant TERM'1 | null TERM'1 | int_constant TERM'1 | ident TERM'2 | [ = EXPRESSION ARRAYCONTENTS ] TERM'1
TERM'1 ::= & | OPERATION UNARYEXPR TERM'1
TERM'2 ::= & | OPERATION UNARYEXPR TERM'1 | [ AUX32 TERM'1
TYPE ::= string | float | int
UNARYEXPR ::= float_constant | string_constant | null | int_constant | ( AUX20 ) | SIGNAL AUX12 | ident AUX12'1 | [ = EXPRESSION ARRAYCONTENTS ]
VARDECL ::= & | [ AUX14 ] VARDECL

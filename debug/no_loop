A'1 ::= PROGRAM | &
PROGRAM ::= AUX14
FUNCLIST ::= FUNCDEF FUNCLIST | FUNCDEF
FUNCDEF ::= def ident ( PARAMLIST ) { STATELIST } | def ident ( ) { STATELIST }
FUNCCALL ::= ident ( PARAMLISTCALL ) | ident ( )
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return RETURNLIST | return
FORSTAT ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT
ARRAY ::= [ ARRAYCONTENTS ]
AUX0 ::= float | int | string
STATEMENT ::= AUX1
AUX1 ::= { STATELIST } | FORSTAT | RETURNSTAT ; | ; | PRINTSTAT ; | VARDECL ; | IFSTAT | FUNCCALL ; | READSTAT ; | ATRIBSTAT ; | break ;
ATRIBSTAT ::= LVALUE = AUX3
AUX3 ::= EXPRESSION | FUNCCALL | ALLOCEXPRESSION
AUX6 ::= <= | == | >= | > | != | <
AUX7 ::= + | -
AUX8 ::= % | / | *
FACTOR ::= AUX10
AUX10 ::= ARRAY | ( NUMEXPRESSION ) | null | LVALUE | string_constant | int_constant | float_constant
AUX11 ::= NUMEXPRESSION | LVALUE
AUX13 ::= int_constant | ident
AUX14 ::= STATEMENT | FUNCLIST
PARAMLISTCALL ::= AUX15
AUX15 ::= ident , PARAMLISTCALL | ident | ident ,
RETURNLIST ::= AUX16
AUX16 ::= NUMEXPRESSION , RETURNLIST | NUMEXPRESSION | NUMEXPRESSION ,
AUX17 ::= elif ( EXPRESSION ) { STATEMENT } AUX17 | elif ( EXPRESSION ) { STATEMENT }
STATELIST ::= STATEMENT AUX18 | STATEMENT
AUX18 ::= STATELIST
ARRAYCONTENTS ::= = EXPRESSION AUX19 | = EXPRESSION
AUX19 ::= , ARRAYCONTENTS
ALLOCEXPRESSION ::= new AUX0 AUX20
AUX20 ::= [ NUMEXPRESSION ] | [ NUMEXPRESSION ] AUX20
EXPRESSION ::= NUMEXPRESSION AUX21 | NUMEXPRESSION
AUX21 ::= AUX6 NUMEXPRESSION
NUMEXPRESSION ::= TERM AUX22 | TERM
AUX22 ::= AUX7 TERM AUX22 | AUX7 TERM
TERM ::= UNARYEXPR AUX23 | UNARYEXPR
AUX23 ::= AUX8 UNARYEXPR AUX23 | AUX8 UNARYEXPR
UNARYEXPR ::= AUX24 FACTOR | FACTOR
AUX24 ::= AUX7
LVALUE ::= ident AUX25 | ident
AUX25 ::= [ ] AUX25 | [ AUX11 ] AUX25 | [ ] | [ AUX11 ]
PARAMLIST ::= AUX26
AUX26 ::= AUX0 LVALUE , PARAMLIST | AUX0 LVALUE | AUX0 LVALUE ,
VARDECL ::= AUX0 ident AUX27 | AUX0 ident
AUX27 ::= [ AUX13 ] AUX27 | [ AUX13 ]
IFSTAT ::= if ( EXPRESSION ) { STATEMENT } AUX17 AUX28 | if ( EXPRESSION ) { STATEMENT } AUX28 | if ( EXPRESSION ) { STATEMENT } AUX17 | if ( EXPRESSION ) { STATEMENT }
AUX28 ::= else { STATEMENT }

A'1 ::= PROGRAM | &
PROGRAM ::= AUX17
FUNCLIST ::= FUNCDEF | FUNCDEF FUNCLIST
FUNCDEF ::= def ident ( PARAMLIST ) STATEMENT | def ident ( ) STATEMENT
LEFTMULTIATRIBSTAT ::= LVALUE , LEFTMULTIATRIBSTAT | LVALUE
FUNCCALL ::= ident ( PARAMLISTCALL ) | ident ( )
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return RETURNLIST | return
FORSTAT ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT
ARRAY ::= [ ARRAYCONTENTS ]
AUX0 ::= string | float | int
STATEMENT ::= AUX1
ATRIBSTAT ::= LVALUE = AUX3
AUX3 ::= EXPRESSION | FUNCCALL | ALLOCEXPRESSION
MULTIATRIBSTAT ::= ( LEFTMULTIATRIBSTAT ) = AUX4
AUX4 ::= FUNCCALL | ( RIGHTMULTIATRIBSTAT )
AUX6 ::= NUMEXPRESSION | ident
AUX8 ::= == | >= | <= | != | < | >
AUX9 ::= - | +
AUX10 ::= * | / | %
FACTOR ::= AUX12
AUX12 ::= LVALUE | ( NUMEXPRESSION ) | ARRAY | float_constant | string_constant | null | int_constant
AUX14 ::= ident | int_constant
RIGHTMULTIATRIBSTAT ::= AUX3 , RIGHTMULTIATRIBSTAT | AUX3
AUX17 ::= STATEMENT | FUNCLIST
RETURNLIST ::= AUX18
AUX18 ::= NUMEXPRESSION | NUMEXPRESSION , RETURNLIST | NUMEXPRESSION ,
AUX19 ::= STATEMENT | STATEMENT AUX19
AUX20 ::= NUMEXPRESSION | LVALUE
ARRAYCONTENTS ::= = EXPRESSION AUX21 | = EXPRESSION
AUX21 ::= , ARRAYCONTENTS
AUX1 ::= { AUX22 } | IFSTAT | PRINTSTAT ; | break ; | MULTIATRIBSTAT ; | ; | RETURNSTAT ; | READSTAT ; | VARDECL ; | ATRIBSTAT ; | FUNCCALL ; | FORSTAT
AUX22 ::= STATEMENT | STATEMENT AUX22
ALLOCEXPRESSION ::= new AUX0 AUX23
AUX23 ::= [ NUMEXPRESSION ] AUX23 | [ NUMEXPRESSION ]
EXPRESSION ::= NUMEXPRESSION AUX24 | NUMEXPRESSION
AUX24 ::= AUX8 NUMEXPRESSION
NUMEXPRESSION ::= TERM AUX25 | TERM
AUX25 ::= AUX9 TERM AUX25 | AUX9 TERM
TERM ::= UNARYEXPR AUX26 | UNARYEXPR
AUX26 ::= AUX10 UNARYEXPR AUX26 | AUX10 UNARYEXPR
UNARYEXPR ::= AUX27 FACTOR | FACTOR
AUX27 ::= AUX9
PARAMLIST ::= AUX28
AUX28 ::= AUX0 LVALUE , PARAMLIST | AUX0 LVALUE | AUX0 LVALUE ,
VARDECL ::= AUX0 ident AUX29 | AUX0 ident
AUX29 ::= [ AUX14 ] AUX29 | [ AUX14 ]
PARAMLISTCALL ::= AUX30
AUX30 ::= AUX6 , PARAMLISTCALL | AUX6 | AUX6 ,
AUX31 ::= STATEMENT | STATEMENT AUX31
LVALUE ::= ident AUX32 | ident
AUX32 ::= [ AUX20 ] AUX32 | [ ] AUX32 | [ AUX20 ] | [ ]
AUX33 ::= elif ( EXPRESSION ) { AUX31 } AUX33 | elif ( EXPRESSION ) { AUX31 }
IFSTAT ::= if ( EXPRESSION ) { AUX19 } AUX33 AUX34 | if ( EXPRESSION ) { AUX19 } AUX34 | if ( EXPRESSION ) { AUX19 } AUX33 | if ( EXPRESSION ) { AUX19 }
AUX34 ::= else { STATEMENT }

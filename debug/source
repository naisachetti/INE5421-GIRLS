PROGRAM ::= AUX14
FUNCLIST ::= FUNCDEF FUNCLIST | FUNCDEF
FUNCDEF ::= def ident ( PARAMLIST ) { STATELIST }
MULTIATRIBSTAT ::= ( LEFTATRIBSTAT ) = ( RIGHTATRIBSTAT )
LEFTMULTIATRIBSTAT ::= LVALUE , LEFTATRIBSTAT | LVALUE
FUNCCALL ::= ident ( PARAMLISTCALL )
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return RETURNLIST
FORSTAT ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT
ARRAY ::= [ ARRAYCONTENTS ]
AUX0 ::= float | int | string
STATEMENT ::= AUX1
AUX1 ::= { STATELIST } | FORSTAT | RETURNSTAT ; | ; | PRINTSTAT ; | VARDECL ; | IFSTAT | FUNCCALL ; | READSTAT ; | ATRIBSTAT ; | break ;
AUX2 ::= float | int | string
ATRIBSTAT ::= LVALUE = AUX3
AUX3 ::= EXPRESSION | FUNCCALL | ALLOCEXPRESSION
RIGHTMULTIATRIBSTAT ::= AUX4 | FUNCCALL ), RIGHTATRIBSTAT | ( EXPRESSION | ALLOCEXPRESSION
AUX4 ::= EXPRESSION | FUNCCALL | ALLOCEXPRESSION
AUX5 ::= float | int | string
AUX6 ::= <= | == | >= | > | != | <
AUX7 ::= + | -
AUX8 ::= % | / | *
AUX9 ::= + | -
FACTOR ::= AUX10
AUX10 ::= ARRAY | ( NUMEXPRESSION ) | null | LVALUE | string_constant | int_constant | float_constant
AUX11 ::= NUMEXPRESSION | LVALUE
AUX12 ::= float | int | string
AUX13 ::= int_constant | ident
AUX14 ::= STATEMENT | FUNCLIST | &
PARAMLISTCALL ::= AUX15
AUX15 ::= ident , PARAMLISTCALL | ident | &
RETURNLIST ::= AUX16
AUX16 ::= NUMEXPRESSION , RETURNLIST | NUMEXPRESSION | &
AUX17 ::= elif ( EXPRESSION ) { STATEMENT } AUX17 | &
STATELIST ::= STATEMENT AUX18
AUX18 ::= STATELIST | &
ARRAYCONTENTS ::= = EXPRESSION AUX19
AUX19 ::= , ARRAYCONTENTS | &
ALLOCEXPRESSION ::= new AUX5 AUX20
AUX20 ::= [ NUMEXPRESSION ] | [ NUMEXPRESSION ] AUX20
EXPRESSION ::= NUMEXPRESSION AUX21
AUX21 ::= AUX6 NUMEXPRESSION | &
NUMEXPRESSION ::= TERM AUX22
AUX22 ::= & | AUX7 TERM AUX22
TERM ::= UNARYEXPR AUX23
AUX23 ::= AUX8 UNARYEXPR AUX23 | &
UNARYEXPR ::= AUX24 FACTOR
AUX24 ::= AUX9 | &
LVALUE ::= ident AUX25
AUX25 ::= [ ] AUX25 | [ AUX11 ] AUX25 | &
PARAMLIST ::= AUX26
AUX26 ::= AUX0 LVALUE , PARAMLIST | AUX12 LVALUE | &
VARDECL ::= AUX2 ident AUX27
AUX27 ::= & | [ AUX13 ] AUX27
IFSTAT ::= if ( EXPRESSION ) { STATEMENT } AUX17 AUX28
AUX28 ::= else { STATEMENT } | &

PROGRAM ::= AUX12
FUNCLIST ::= FUNCDEF | FUNCDEF FUNCLIST
FUNCDEF ::= def ident ( PARAMLIST ) { STATELIST }
MULTIATRIBSTAT ::= ( LEFTATRIBSTAT ) = ( RIGHTATRIBSTAT )
LEFTMULTIATRIBSTAT ::= LVALUE , LEFTATRIBSTAT | LVALUE
FUNCCALL ::= ident ( PARAMLISTCALL )
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return RETURNLIST
FORSTAT ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT
ARRAY ::= [ ARRAYCONTENTS ]
AUX0 ::= string | float | int
STATEMENT ::= AUX1
AUX1 ::= FORSTAT | ; | IFSTAT | RETURNSTAT ; | { STATELIST } | ATRIBSTAT ; | break ; | FUNCCALL ; | PRINTSTAT ; | READSTAT ; | VARDECL ;
AUX2 ::= string | float | int
ATRIBSTAT ::= LVALUE = AUX3
AUX3 ::= EXPRESSION | ALLOCEXPRESSION | FUNCCALL
RIGHTMULTIATRIBSTAT ::= ( EXPRESSION | ALLOCEXPRESSION | AUX4 | FUNCCALL ), RIGHTATRIBSTAT
AUX4 ::= EXPRESSION | ALLOCEXPRESSION | FUNCCALL
AUX5 ::= string | float | int
AUX6 ::= > | < | == | <= | != | >=
AUX7 ::= - | +
AUX8 ::= * | / | %
AUX9 ::= - | +
FACTOR ::= AUX10
AUX10 ::= ARRAY | LVALUE | int_constant | string_constant | null | float_constant | ( NUMEXPRESSION )
AUX11 ::= string | float | int
AUX12 ::= & | STATEMENT | FUNCLIST
PARAMLISTCALL ::= AUX13
AUX13 ::= ident , PARAMLISTCALL | ident | &
RETURNLIST ::= AUX14
AUX14 ::= & | NUMEXPRESSION | NUMEXPRESSION , RETURNLIST
IFSTAT ::= if ( EXPRESSION ) STATEMENT AUX15
AUX15 ::= & | else STATEMENT
STATELIST ::= STATEMENT AUX16
AUX16 ::= STATELIST | &
LVALUE ::= ident AUX17
AUX17 ::= & | [ NUMEXPRESSION ] AUX17 | [ ] AUX17
ARRAYCONTENTS ::= = EXPRESSION AUX18
AUX18 ::= & | , ARRAYCONTENTS
VARDECL ::= AUX2 ident AUX19
AUX19 ::= & | [ int_constant ] AUX19
ALLOCEXPRESSION ::= new AUX5 AUX20
AUX20 ::= [ NUMEXPRESSION ] AUX20 | [ NUMEXPRESSION ]
EXPRESSION ::= NUMEXPRESSION AUX21
AUX21 ::= & | AUX6 NUMEXPRESSION
NUMEXPRESSION ::= TERM AUX22
AUX22 ::= & | AUX7 TERM AUX22
TERM ::= UNARYEXPR AUX23
AUX23 ::= & | AUX8 UNARYEXPR AUX23
UNARYEXPR ::= AUX24 FACTOR
AUX24 ::= & | AUX9
PARAMLIST ::= AUX25
AUX25 ::= AUX11 LVALUE | AUX0 LVALUE , PARAMLIST | &
